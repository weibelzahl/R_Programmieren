- Class: meta
  Course: R Programmieren
  Lesson: Simulation
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat; Translation by PFH
  Version: 2.2.11

- Class: text
  Output: Einer der großen Vorteile der Verwendung von statistischen Programmiersprachen wie R ist die Vielzahl an Möglichkeiten, Zufallszahlen zu simulieren.

- Class: cmd_question
  Output: Die erste Funktion, die wir benutzen werden um Zufallszahlen zu generieren, ist sample(). Nutzen Sie den Befehl ?sample, um die Dokumentation aufzurufen.
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Nutzen Sie den Befehl '?sample', um die Dokumentation für die Funktion sample() aufzurufen. 

- Class: cmd_question
  Output: "Wir wollen nun einen viermaligen Würfelwurf mit der Funktion sample(1:6, 4, replace = TRUE) simulieren. Probieren Sie dies jetzt aus."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Tippen Sie sample(1:6, 4, replace = TRUE) in die Konsole, um einen viermaligen Würfelwurf zu simulieren.

- Class: cmd_question
  Output: "Wiederholen Sie nun den Befehl, um zu sehen, wie sich das neue Ergebnis vom vorherigen unterscheidet (Die Wahrscheinlichkeit für exakt dasselbe Ergebnis ist extrem gering: (1/6)^4 = 0.00077 = 0.077%)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Tippen Sie sample(1:6, 4, replace = TRUE) in die Konsole, um einen viermaligen Würfelwurf zu simulieren.

- Class: text
  Output: 'Der Befehl sample(1:6, 4, replace = TRUE) lässt R zufällig vier Zahlen zwischen 1 und 6 ziehen. "replace = TRUE" steht für das Ziehen MIT Zurücklegen. Jedes Element, das gezogen wurde, wird wieder "zurückgelegt", sodass dieselbe Zahl mehr als einmal vorkommen kann. Genau das wollen wir hier, da bei jedem Würfelwurf alle Zahlen zwischen 1 und 6 gewürfelt werden können, unabhängig davon, welche Zahl beim ersten Mal gewürfelt wurde.'

- Class: cmd_question
  Output: 'Lassen Sie R nun 10 Zahlen zwischen 1 und 20 OHNE Zurücklegen ziehen. Wenn Sie das Argument "replace" weglassen, zieht R automatisch ohne Zurücklegen.'
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: Tippen Sie sample(1:20, 10) in die Konsole, um zufällig und ohne Zurücklegen 10 Zahlen zwischen 1 und 20 zu ziehen.

- Class: text
  Output: Da wir R befohlen haben, ohne Zurücklegen zu ziehen, kommt im Output keine Zahl mehr als einmal vor.

- Class: cmd_question
  Output: LETTERS ist eine vordefinierte Variable in R, die einen Vektor mit allen 26 Buchstaben des englischen Alphabets enthält. Schauen Sie sich die Variable jetzt an.
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: Tippen Sie LETTERS, um den Inhalt der Variablen in der Konsole zu sehen.

- Class: cmd_question
  Output: Die Funktion sample() kann auch genutzt werden, um die Elemente eines Vektors zu permutieren bzw. neu anzuordnen. Lassen Sie R mit sample(LETTERS) alle 26 Buchstaben des englischen Alphabets neu anordnen.
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: Tippen Sie sample(LETTERS), um alle 26 Buchstaben des englischen Alphabets neu anzuordnen.

- Class: text
  Output: Dies ist dasselbe, wie eine Stichprobe der Größe 26 aus der Menge LETTERS (ohne Zurücklegen)zu ziehen. Wenn das Argument 'size' der Funktion sample() nicht spezifiziert wird, zieht R eine Stichprobe von der Größe des Vektors, aus dem gezogen wird.

- Class: text
  Output: Nehmen wir an, wir wollten einen 100-fachen Münzwurf mit einer unfairen Münze simulieren. Bei dieser Münze ist die Wahrscheinlichkeit für Zahl 0.3 und für Kopf 0.7.

- Class: cmd_question
  Output: "Der Wert 0 soll das Ergebnis Zahl repräsentieren, der Wert 1 das Ergebnis Kopf. Nutzen Sie die Funktion sample() um eine Stichprobe der Größe 100 aus dem Vektor c(0,1) zu ziehen (mit Zurücklegen). Da es sich um eine unfaire Münze handelt, müssen wir die spezifischen Wahrscheinlichkeiten der Werte 0 (Zahl) und 1 (Kopf) angeben. Hierfür benötigen wir ein viertes Argument: prob = c(0.3,0.7). Ordnen Sie das Ergebnis einer neuen Variable namens flips zu." 
  CorrectAnswer: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: 'Der folgende Befehl simuliert 100 Münzwürfe einer unfairen Münze und weist das Ergebnis der Variablen flips zu: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))'

- Class: cmd_question
  Output: Schauen Sie sich den Inhalt der Variablen flips an.
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: Tippen Sie flips, um den Inhalt der Variablen zu sehen.

- Class: cmd_question
  Output: Da wir die Wahrscheinlichkeit für Kopf für jeden einzelnen Wurf auf 0.7 gesetzt haben, erwarten wir, dass ungefähr 70 der Würfe den Wert 1 aufweisen. Zählen Sie die tatsächliche Anzahl der 1en in der Variablen flips mit der Funktion sum().
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: sum(flips) summiert alle 1en und 0en, sodass das Ergebnis der absoluten Häufigkeit der 1en in der Variablen flips entspricht.

- Class: cmd_question
  Output: Unser Münzwurfexperiment ist ein Zufallsexperiment mit dichotomen Ausgang (0 oder 1) und 100 unabhängigen Durchgängen (Münzwürfen), sodass wir auch die Funktion rbinom() nutzen können, um diese binomial verteilte Zufallsvariable zu simulieren. Rufen Sie mit ?rbinom die Dokumentation für die Funktion rbinom() auf.
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Tippen Sie ?rbinom um die Hilfeseite für rbinom() aufzurufen.

- Class: text
  Output: 'Jede Wahrscheinlichkeitsfunktion hat in R eine r***-Funktion (für "random", d.h. zufällig), eine d***-Funktion (für "density", d.h. Dichte), eine p***-Funktion (für "probability", d.h. Wahrscheinlichkeit) und eine q***-Funktion (für "quantile", also die Quantile). In dieser Übung geht es vor allem um die r***-Funktionen, auf die p***- und d***-Funktionen gehen wir in der letzten Aufgabe der Einsendeaufgabe "Verteilungen und Stichprobenverteilungen" ein.'

- Class: cmd_question
  Output: "Eine binomial-verteilte Zufallsvariable repräsentiert die Anzahl von Erfolgen (hier: Kopfwürfe) bei einer gegebenen Anzahl von unabhängigen Versuchen (hier: Münzwürfe). Deswegen können wir mit der Funktion rbinom(1, size=100, prob = 0.7) eine einzige Zufallsvariable generieren, die die Anzahl der Kopf-Würfe bei unserem 100-fachen Münzwurf repräsentiert. Beachten Sie, dass Sie nur die Wahrscheinlichkeit der Erfolge (hier: Kopfwürfe) angeben und nicht die Wahrscheinlichkeit der Misserfolge (Zahlwürfe). Probieren Sie den Befehl jetzt aus."
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Verwenden Sie die Funktion rbinom() mit n = 1, size = 100 und prob = 0.7.

- Class: cmd_question
  Output: Wenn wir alle 0en und 1en sehen wollen, können wir auf ähnliche Art und Weise verfahren. Dafür setzen wir die n=100 und size=1. Die Erfolgswahrscheinlichkeit bleibt bei 0.7. Probieren Sie den Befehl jetzt aus und weisen Sie das Ergebnis der Variable flips2 zu.  
  CorrectAnswer: flips2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Verwenden Sie die Funktion rbinom() mit n = 100, size = 1 und prob = 0.7 und weisen Sie das Ergebnis einer Variable mit Namen flips2 zu.

- Class: cmd_question
  Output: Schauen Sie sich den Inhalt der Variablen flips2 an.
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: Tippen Sie flips2, um den Inhalt der Variablen zu sehen.

- Class: cmd_question
  Output: Benutzen Sie nun die Funktion sum() um die absolute Häufigkeit der 1en (Kopfwürfe) in der Variablen flips2 zu berechnen. Das Ergebnis sollte in der Nähe von 70 sein.
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: Benutzen Sie den Befehl sum(flips2) um die Anzahl an 1en zu berechnen.

- Class: cmd_question
  Output: Es gibt in R mit rbinom() vergleichbare Funktionen für die Simulation von Zufallszahlen, die auf anderen Wahrscheinlichkeitsfunktionen beruhen. Rufen Sie jetzt die Dokumentation für rnorm() auf.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Tippen Sie ?rnorm um die Dokumentation aufzurufen.

- Class: cmd_question
  Output: Die Standardnormalverteilung hat einen Mittelwert von 0 und eine Standardabweichung von 1. Wie Sie der Erklärung unter der Überschrift 'Usage' entnehmen können, sind die voreingestellten Werte für die Argumente 'mean' und 'sd' der Funktion rnorm() 0 und 1. Deswegen generiert der Befehl rnorm(10) 10 Zufallszahlen einer Standardnormalverteilung. Testen Sie den Befehl jetzt aus.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Verwenden Sie den Befehl rnorm(10) um 10 Zufallszahlen einer Standardnormalverteilung zu generieren.

- Class: cmd_question
  Output: Wiederholen Sie die Simulation, aber gehen Sie nun von einer Normalverteilung mit einem Mittelwert von 100 und einer  Standardabweichung von 25 aus.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Verwenden Sie den Befehl rnorm(10, mean = 100, sd = 25).

- Class: text
  Output: Wie können wir vorgehen, wenn wir 100 "Gruppen" von Zufallszahlen mit je 5 Werten einer Poissonverteilung mit Mittelwert 10 simulieren wollen? Beginnen wir mit der Simulation einer Gruppe von 5 Zahlen. Danach zeige ich Ihnen, wie Sie die Operation 100x auf praktische Art und Weise wiederholen können.

- Class: cmd_question
  Output: Generieren Sie fünf Zufallszahlen einer Poissonverteilung mit Mittelwert 10. Nutzen Sie die Dokumentation für die Funktion rpois(), wenn Sie Hilfe benötigen.
  CorrectAnswer: rpois(5, 10)
  AnswerTests: match_call('rpois(5, 10)')
  Hint: Verwenden Sie den Befehl rpois(5, 10) um 5 Zufallszahlen einer Poissonverteilung mit Mittelwert 10 zu generieren.

- Class: cmd_question
  Output: Verwenden Sie nun den Befehl replicate(100, rpois(5, 10)) um die Operation 100x zu wiederholen. Speichern Sie das Ergebnis in einer neuen Variable mit dem Namen my_pois.
  CorrectAnswer: my_pois <- replicate(100, rpois(5, 10))
  AnswerTests: match_call('my_pois <- replicate(100, rpois(5, 10))')
  Hint: my_pois <- replicate(100, rpois(5, 10)) wiederholt die Operation 100x und speichert das Ergebnis in der Variablen my_pois.

- Class: cmd_question
  Output: Werfen Sie einen Blick auf den Inhalt von my_pois.
  CorrectAnswer: my_pois
  AnswerTests: omnitest('my_pois')
  Hint: Tippen Sie my_pois in die Konsole.

- Class: cmd_question
  Output: Die Funktion replicate() hat eine Matrix erzeugt, wobei jede Spalte 5 Zufallszahlen enthält, die auf einer Poissonverteilung mit Mittelwert 10 beruhen. Nun können wir den Mittelwert jeder Spalte von my_pois mit der Funktion colMeans() berechnen. Speichern Sie das Ergebnis in der Variablen cm.
  CorrectAnswer: cm <- colMeans(my_pois)
  AnswerTests: omnitest('cm <- colMeans(my_pois)')
  Hint: Verwenden Sie den Befehl cm <- colMeans(my_pois)

- Class: cmd_question
  Output: Werfen Sie außerdem einen Blick auf die Verteilung der Spaltenmittelwerte, indem Sie mit dem Befehl hist(cm) ein Histogramm erstellen.
  CorrectAnswer: hist(cm)
  AnswerTests: omnitest('hist(cm)')
  Hint: hist(cm) erstellt ein Histogramm der Spaltenmittelwerte.

- Class: text
  Output: Die Spaltenmittelwerte, d.h. die Stichprobenmittelwerte der 100 Stichproben mit n=5, die wir gezogen haben, folgen fast einer Normalverteilung. Dies ist also ein gutes Beispiel für den Zentralen Grenzwertsatz!

- Class: text
  Output: Alle üblichen Wahrscheinlichkeitsverteilungen sind in R vorhanden, unter anderem die Exponentialfunktion (rexp()), die Chi-Quadrat-Funktion (rchisq()), die Gamma-Funktion (rgamma()), usw. 

- Class: text
  Output: Simulation ist ein weites Feld und wir haben nur an der Oberfläche von dem, was möglich ist, gekratzt. Ich möchte Sie ermutigen, die Wahrscheinlichkeitsfunktionen auf eigene Faust weiter auszuprobieren!
  
- Class: text
  Output: 'Herzlichen Glückwunsch, Sie haben soeben die Anforderungen für die Einsendeaufgaben zum Fernlehrbrief  `Statistik 1 - Wahrscheinlichkeitstheorie - Verteilungen und Stichprobenverteilungen` (Aufgabe 1) erfüllt. Nennen Sie in Ihrer Einsendung unter Aufgabe 1 einfach das Codewort `StatistikeR`.'

- Class: text
  Output: 'Tipp: Schreiben Sie sich das Codewort jetzt auf. Das war das letzte Kapitel dieses Kurses.'    
