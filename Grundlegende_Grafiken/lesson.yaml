- Class: meta
  Course: R Programming
  Lesson: Base Graphics
  Author: David Kane
  Type: Standard
  Organization: Williams College
  Version: 0.1.1

- Class: text
  Output: Eine der größten Stärken von R im Vergleich zu anderen Programmiersprachen ist die Einfachheit, mit der Grafiken nach Publikationsstandards erstellt werden können. In dieser Übung werden Sie einige grundlegende Funktionen für das Erstellen von Grafiken in R kennen lernen.

- Class: cmd_question
  Output: Laden Sie zuerst den Datensatz cars, indem Sie den Befehl data(cars) eingeben.
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: Tippen Sie data(cars) um die Daten zu laden.

- Class: text
  Output: Um die Vorgehensweisen zu veranschaulichen, werden wir mit einfachen Datensätzen arbeiten. Unser hauptsächliches Ziel ist, verschiedene Funktionen für die Grafikerstellung und deren Argumente einzuführen. Natürlich würde der Output bei größeren, komplexeren Datensätzen interessanter aussehen.

- Class: cmd_question
  Output: Rufen Sie die Dokumentation bzw. Hilfeseite für den Datensatz cars auf.
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)', 'help("plot")')
  Hint: Tippen Sie ?cars oder help(cars) um die Hilfeseite mit Informationen über den Datensatz cars zu sehen.

- Class: text
  Output: "Wie Sie der Hilfeseite entnehmen können, hat der Datensatz nur zwei Variablen: speed (Geschwindigkeit) und dist (Bremsweg). Beachten Sie, dass die Daten aus den 1920er Jahren stammen."

- Class: cmd_question
  Output: Werfen Sie zuerst mit der Funktion head() einen Blick auf die Daten.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Tippen Sie head(cars) in die Konsole, um die ersten Zeilen des Datensatzes cars zu sehen.

- Class: text
  Output: Bevor man eine Grafik erstellt, ist es immer sinnvoll, ein Gefühl für die Daten zu bekommen. Zentrale Befehle in R sind hierfür dim(), names(), head(), tail(), summary() und str().

- Class: cmd_question
  Output: Wenden Sie den Befehl plot() auf den Datensatz cars an. 
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: Tippen Sie plot(cars), um eine Graphik des Datensatzes zu erstellen.

- Class: text
  Output: Wie immer versucht R, Ihnen etwas auszugeben, das die Informationen, die Sie R gegeben haben, berücksichtigt. R bemerkt erstens, dass der Datensatz nur zwei Spalten hat, weswegen es annimmt, dass Sie eine Darstellung wünschen, in der die Information jeder Spalte auf je einer Achse eines zweidimensionalen Koordinatensystems aufgetragen ist. 
  
- Class: text
  Output: Zweitens benutzt R die Namen der Spalten für die Beschriftung der Achsen, da wir keine anderweitigen Informationen gegeben haben. R liefert drittens eine passende Skalierung der Achsen und benutzt viertens die anderen Voreinstellungen der Funktion plot().

- Class: text
  Output: Wir werden nun einige Zeit damit verbringen, die Funktion plot() zu ergründen, wobei viele der angesprochenen Aspekte auf die meisten anderen Funktionen für die Grafikerstellung übertragbar sind. Beachten Sie, dass 'plot' die Kurzform von 'scatterplot' (Streudiagramm) ist.

- Class: cmd_question
  Output: Schauen Sie sich die Hilfeseite für plot() an. 
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: Tippen Sie ?plot oder help(plot) um die Hilfeseite aufzurufen.

- Class: text
  Output: "Die Hilfeseite für die Funktion plot() zeigt Ihnen die verschiedenen Argumente, die bei dieser Funktion spezifiziert werden können. Die beiden wichtigsten sind x und y, die Variablen, die grafisch dargestellt werden. Verwenden Sie die Namen der Argumente, wenn Sie die nächsten Fragen beantworten. Tippen Sie also nicht type plot(cars$speed, cars$dist) - auch wenn dieser Befehl funktionieren würde -, sondern plot(x = cars$speed, y = cars$dist)."

- Class: cmd_question
  Output: Verwenden Sie den Befehl plot() um die Variable Geschwindigkeit (speed) auf der x-Achse und Bremsweg (dist) auf der y-Achse darzustellen. Geben Sie die Variablen explizit als Argumente für x und y an.
  CorrectAnswer: plot(x = cars$speed, y = cars$dist)
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist)')
  Hint: Tippen Sie plot(x = cars$speed, y = cars$dist) um das Streudiagramm zu erstellen.

- Class: text
  Output: 'Beachten Sie, dass dieser Befehl zu einer etwas anderen Grafik führt als plot(cars). In diesem Fall ist R nicht sicher, was Sie als Achsenbeschriftung nutzen möchten, sodass es einfach die Argumente nutzt, die Sie eingegeben haben - einschließlich des Datensatznamens und der Dollarzeichen.'

- Class: text
  Output: 'Beachten Sie, dass es andere Wege gibt, den Befehl plot() zu spezifizieren, beispielsweise über die Eingabe als "Formel". Wir bekommen z.B. die gleiche Grafik mit plot(dist ~ speed, cars). Wir werden allerdings erst später in der Übung auf die Eingabe als Formel eingehen.'
  
- Class: cmd_question
  Output: Verwenden Sie den Befehl plot() um die Variable Bremsweg (dist) auf der x-Achse und Geschwindigkeit (speed) auf der y-Achse darzustellen. Die Variablen sollen also im Vergleich zur vorherigen Grafik auf der jeweils anderen Achse erscheinen.
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: Tippen Sie plot(x = cars$dist, y = cars$speed) um die Grafik zu erstellen.

- Class: text
  Output: Es ist wahrscheinlich sinnvoller, die Geschwindigkeit auf der x-Achse darzustellen, da eher der Bremsweg eine Funktion der Geschwindigkeit ist als andersherum. Nutzen Sie also diese Zuordnung zu den Achsen für die weiteren Fragen dieser Übung.

- Class: text
  Output: Sie können in der Tat annehmen, dass die Antworten auf die nächsten paar Fragen alle der Form plot(x = cars$speed, y = cars$dist, ...) folgen, jedoch verschiedene Argumente statt des ... genutzt werden sollen.

- Class: cmd_question
  Output: Erstellen Sie die Grafik noch einmal und geben Sie an, dass die x-Achse mit "Speed" beschriftet sein soll. Hierfür benötigen Sie das Argument xlab = ... 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed")')
  Hint: Tippen Sie plot(x = cars$speed, y = cars$dist, xlab = "Speed") um die Grafik zu erstellen.

- Class: cmd_question
  Output: Erstellen Sie die Grafik erneut und geben Sie an, dass die y-Achse mit "Stopping Distance" beschriftet sein soll.
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")')
  Hint: Tippen Sie plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") um die Grafik zu erstellen.

- Class: cmd_question
  Output: Erstellen Sie die Grafik noch einmal mit "Speed" und "Stopping Distance" als Achsenbeschriftungen. 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")')
  Hint: Tippen Sie plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance") um die Grafik zu erstellen.

- Class: text
  Output: Der Grund dafür, dass der Befehl plot(cars) am Beginn der Übung funktioniert hat, war, dass R schlau genug war zu wissen, dass das erste Element (d.h. die erste Spalte) des Datensatzes dem x-Argument zugewiesen und das zweite Element dem y-Argument zugewiesen werden sollte. Um weniger Arbeit mit dem Tippen zu haben, sollen die nächsten Antworten alle in der Form plot(cars, ...) mit verschiedenen zusätzlichen Argumenten sein.

- Class: text
  Output: Wir möchten für jede der folgenden Fragen nur ein zusätzliches Argument auf einmal hinzufügen. Natürlich können Sie mehr als ein Argument einfügen, wenn Sie eine echte Datenauswertung machen.

- Class: cmd_question
  Output: Erstellen Sie ein Streudiagramm für den Datensatz cars mit der Überschrift "My Plot". Hierfür benötigen Sie das Argument "main".
  CorrectAnswer: plot(cars, main = "My Plot")
  AnswerTests: omnitest(correctExpr='plot(cars, main = "My Plot")')
  Hint: Tippen Sie plot(cars, main = "My Plot") um die Grafik zu erstellen.

- Class: cmd_question
  Output: Erstellen Sie ein Streudiagramm für den Datensatz cars mit der Unterüberschrift "My Plot Subtitle". Das benötigte Argument können Sie der Hilfeseite (?plot) entnehmen.
  CorrectAnswer: plot(cars, sub = "My Plot Subtitle")
  AnswerTests: omnitest(correctExpr='plot(cars, sub = "My Plot Subtitle")')
  Hint: Tippen Sie plot(cars, sub = "My Plot Subtitle") um die Grafik zu erstellen.

- Class: text
  Output: Die Hilfeseite des Befehls plot() deckt nur eine kleine Anzahl der vielen Argumente ab, die bei plot() und anderen Funktionen für die Grafikerstellung spezifiziert werden können. Um ein paar der vielen anderen Optionen kennen zu lernen, schauen Sie auf ?par nach. Wir werden uns im Folgenden ein paar der häufiger genutzten Argumente ansehen. Ihre Antworten sollen der grundlegenden Form plot(cars, ...) folgen.

- Class: cmd_question
  Output: Plot cars with a red color. (Use col = 2 to achieve this effect.)
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Type plot(cars, col = 2) to create the plot.

- Class: cmd_question
  Output: Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15) to achieve this effect.) 
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Type plot(cars, xlim = c(10, 15)) to create the plot.

- Class: text
  Output: You can also change the shape of the symbols in the plot. The help page for points (?points) provides the details.

- Class: cmd_question
  Output: Plot cars using triangles.  (Use pch = 2 to achieve this effect.) 
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Type plot(cars, pch = 2) to create the plot.

- Class: text
  Output: Arguments like "col" and "pch" may not seem very intuitive. And that is because they aren't! So, many/most people use more modern packages, like ggplot2, for creating their graphics in R.

- Class: text
  Output: It is, however, useful to have an introduction to base graphics because many of the idioms in lattice and ggplot2 are modeled on them.

- Class: text
  Output: Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

- Class: cmd_question
  Output: Load the mtcars data frame. 
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Type data(mtcars) to load the data.

- Class: text
  Output: Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type play(). This temporarily suspends the lesson (without losing the work you have already done) and allows you to issue commands like dim(mtcares) and head(mtcars). Once you are done examining the data, just type nxt() and the lesson will pick up where it left off.

- Class: cmd_question
  Output: Look up the help page for boxplot(). 
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Type ?boxplot or help(boxplot) to view a help page with details about boxplot.

- Class: text
  Output: Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire data frame. This is what the "data" argument in boxplot() allows.

- Class: text
  Output: boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.

- Class: cmd_question
  Output: Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Type boxplot(formula = mpg ~ cyl, data = mtcars) to create the plot.

- Class: text
  Output: The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we explored with plot() above to add axis labels, titles and so on.

- Class: text
  Output: When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is best used by just passing in a single vector. 

- Class: cmd_question
  Output: Use hist() with the vector mtcars$mpg to create a histogram.
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: Type hist(mtcars$mpg) to create the plot.

# Not sure what a good lesson length is for this. 
# Might add some information on saving plots.
# Other functions that I use include identify().

- Class: text
  Output: In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2 package. If you want to explore other elements of base graphics, then this web page (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.

- Class: text
  Output: Herzlichen Glückwunsch, Sie haben soeben die Anforderungen für die Einsendeaufgaben zum Fernlehrbrief  `Statistik 1 - Deskriptive Statistik - Das lineare Modell` (Aufgabe 1) erfüllt. Nennen Sie in Ihrer Einsendung unter Aufgabe 1 einfach das Codewort `ÜbeRfliegeR`.
