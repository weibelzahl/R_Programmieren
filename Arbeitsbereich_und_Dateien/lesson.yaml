- Class: meta
  Course: R Programming
  Lesson: Arbeitsbereich und Dateien
  Author: David Kane
  Type: Standard
  Organization: Williams College
  Version: 0.1.2

- Class: text
  Output: In dieser Übung werden Sie lernen Ihren lokalen Arbeitsbereich in R zu untersuchen. Sie werden das Zusammenspiel von Arbeitsbereich und lokalem Dateisystem explorieren.

- Class: text
  Output: Die verschiedenen Betriebssysteme unterscheiden sich in der Art wie sie mit Dateipfaden und ähnlichem umgehen, darum unterscheiden sich unter Umständen auch die Ausgaben eines Befehls, wenn dieser auf unterschiedlichen Rechnern angewendet wird.

- Class: text
  Output: Fangen wir doch gleich mal mit einem Beispiel an, so dass Sie ein Gefühl dafür entwickeln können, wie diese Spezialfunktionen funktionieren!

- Class: cmd_question
  Output: 'Finden Sie heraus, welches Verzeichnis Ihre aktuelle Sitzung in R verwendet. Das Arbeitsverzeichnis (englisch: working directory) erhalten Sie mit dem Befehl getwd().'
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Tippen Sie 'getwd()', um das aktuelle Arbeitsverzeichnis zu erhalten.

- Class: cmd_question
  Output: Die vorhandenen Objekt in Ihrem Arbeitsbereich erhalten Sie mit dem Befehl ls().
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Tippen Sie 'ls()', um alle Objekte in Ihrem lokalen Arbeitsbereich zu sehen.

- Class: text
  Output: Einige Befehle in R sind die gleichen, die auch in Unix verwendet werden. Noch ein Grund sich mal genauer mit Unix zu beschäftigen.

- Class: text
  Output: In den beiden bisherigen Fragen haben wir Ihnen immer genau vorgegeben, wie der einzutippende Befehl lautet, aber das ist eigentlich ein wenig zu einfach. Das sollten wir ändern. 

- Class: text
  Output: Stattdessen werden wir die Fragen meist so stellen, dass man den entsprechenden Befehl auch mit einer Suche im Web finden kann. Bei der letzten Frage hätte eine Suche nach "R Liste Objekte Arbeitsbereich" funktioniert.

- Class: cmd_question
  Output: 'Weisen Sie der Variable x den Wert 9 zu. Der Befehl lautet: x <- 9 (das sollten Sie bereits wissen).'
  CorrectAnswer: x <- 9
  AnswerTests: omnitest(correctExpr='x <- 9')
  Hint: Tippen Sie 'x <- 9', um x den Wert 9 zuzuweisen.

- Class: text
  Output: Da Sie nun das Objekt x erstellt haben, sollten Sie x aufgelistet bekommen, wenn Sie den Befehl ls() verwenden. Um dies zu tun müssen Sie zunächst diese swirl-Übung unterbrechen. Das geht mit dem Befehl play(). Wenn Sie den ls()-Befehl ausprobiert haben, kommen Sie mit nxt() wieder hierher zurück. Probieren Sie das mal aus (zunächst müssen Sie die Eingabetaste drücken, um auf die Kommandozeile zu kommen)!

- Class: cmd_question
  Output: Erstellen Sie nun eine Liste aller Dateien in Ihrem Arbeitsverzeichnis. Welcher Befehl ist dafür geeignet?
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'dir()')
  Hint: Tippen Sie 'list.files()', um eine Liste aller Dateien in Ihrem Arbeitsverzeichnis zu erhalten.

- Class: text
  Output: Während wir diese Befehle durchgehen, lohnt es sich jeweils auch die entsprechenden Hilfeseiten anzusehen.

- Class: cmd_question
  Output: Öffnen Sie die Hilfeseite für list.files().
  CorrectAnswer: ?list.files
  AnswerTests: any_of_exprs('?list.files', 'help("list.files")')
  Hint: Tippen Sie '?list.files', um die Hilfeseite des Befehls list.files zu öffnen.

- Class: text
  Output: Zu den besonders hilfreichen Teilen einer jeden Hilfeseite in R gehört der Abschnitt "See Also". Lesen Sie diesen Abschnitt auf der Hilfeseite für list.files(). Einige dieser Funktionen könnten in dieser Übung nochmal wichtig werden.

#- Class: cmd_question
#  Output: List all the files in your working directory recursively --- that is, including the files in any subdirectories. 
#  CorrectAnswer: list.files(recursive = TRUE)
#  AnswerTests: omnitest(correctExpr='list.files(recursive = TRUE)')
#  Hint: Type list.files(recursive = TRUE) to list all the files in your working directory recursively.

- Class: text
  Output: Wen man die Funktion args() auf den Namen einer anderen Funktion anwendet, erhält man eine Liste der Argumente, die man bei dieser Funktion anwenden kann.

- Class: cmd_question
  Output: Verwenden Sie die Funktion args(), um herauszufinden, welche Argumente bei der Funktion list.files() angewendet werden können.
  CorrectAnswer: args(list.files)
  AnswerTests: omnitest(correctExpr='args(list.files)')
  Hint: Tippen Sie 'args(list.files)', um eine Liste der anwendbaren Argumente zu erhalten.

- Class: cmd_question
  Output: Weisen Sie nun den Wert des aktuellen Arbeitsverzeichnisses einer Variable mit dem Namen "old.dir" zu.
  CorrectAnswer: old.dir <- getwd()
  AnswerTests: omnitest(correctExpr='old.dir <- getwd()')
  Hint: Tippen Sie 'old.dir <- getwd()', um den Wert des aktuellen Arbeitsverzeichnisses der Variable "old.dir" zuzuweisen.

- Class: text
  Output: Wir werden old.dir am Ende dieser Übung verwenden, um den Anfangszustand wieder herzustellen. Viele Funktionen wie getwd() haben die nützliche Eigenschaft, dass sie die Antwort als Ergebnis ausgeben.

- Class: cmd_question
  Output: Erstellen Sie ein neues Verzeichnis innerhalb des aktuellen Arbeitsverzeichnisses mit dem Namen "testdir". Finden Sie heraus wie das geht.
  CorrectAnswer: dir.create("testdir")
  AnswerTests: omnitest(correctExpr='dir.create("testdir")')
  Hint: Tippen Sie 'dir.create("testdir")', um im aktuellen Arbeitsverzeichnis ein neues Verzeichnis mit dem Namen "testdir" zu erstellen.

- Class: text
  Output: Alles weitere werden wir in diesem neuen Verzeichnis machen und dieses am Ende dann wieder löschen. Frei nach dem Motto "Take only pictures, leave only footprints."

- Class: cmd_question
  Output: Machen Sie nun "testdir" zu Ihrem Arbeitsverzeichnis. Finden Sie heraus wie das geht.
  CorrectAnswer: setwd("testdir")
  AnswerTests: any_of_exprs('setwd("testdir")', 'setwd("testdir/")')
  Hint: Verwenden Sie den Befehl 'setwd("testdir")', um das Arbeitsverzeichnis auf "testdir" zu ändern.

- Class: text
  Output: Üblicherweise werden Sie Ihr Arbeitsverzeichnis dorthin legen, wo es vernünftig erscheint, also z.B. auf ein Verzeichnis, das für das Projekt an dem Sie gerade arbeiten erstellt wurde. Außerdem bietet R Studio eine hervorragende Möglichkeit, die eigenen Arbeitsergebnisse in Paketen abzulegen, dies führt aber zu weit und kann im Rahmen dieser Übung nicht behandelt werden.

- Class: cmd_question
  Output: Erstellen Sie in Ihrem Arbeitsverzeichnis eine Datei mit dem Namen "mytest.R". Finden Sie heraus wie das geht.
  CorrectAnswer: file.create("mytest.R")
  AnswerTests: omnitest(correctExpr='file.create("mytest.R")')
  Hint: Der Befehl file.create("mytest.R") macht genau das!

- Class: cmd_question
  Output: Diese Datei sollte die einzige in dem neu erstellten Verzeichnis sein. Überprüfen Sie dies, indem Sie den Befehl verwenden, den Sie vorhin gelernt haben, um alle Dateien in einem Verzeichnis auszugeben.
  CorrectAnswer: list.files()
  AnswerTests: any_of_exprs('list.files()', 'list.files')
  Hint: Der Befehl list.files() zeigt, dass sich sonst keine Dateien in dem Verzeichnis befinden.


- Class: cmd_question
  Output: Finden Sie nun heraus, mit welchem Befehl man überprüfen kann, ob sich eine Datei mit dem Namen "mytest.R" im Arbeitsverzeichnis befindet.
  CorrectAnswer: file.exists("mytest.R")
  AnswerTests: omnitest(correctExpr='file.exists("mytest.R")')
  Hint: Verwenden Sie "file.exists("mytest.R")", um zu überprüfen, ob die Datei existiert.

- Class: text
  Output: Auf den ersten Blick mag dieser Befehl überflüssig erscheinen. Wenn man jedoch ein Programm schreibt, bei dem nacheinander eine Reihe von Datendateien abgearbeitet werden sollen, empfiehlt es sich jeweils vorher zu prüfen, ob die Datei denn überhaupt existiert.

- Class: cmd_question
  Output: Als nächstes wollen Sie mehr über die Datei "mytest.R" erfahren. Welcher Befehl und welches dazugehörige Argument gibt Informationen über die Datei "mytest.R" aus?
  CorrectAnswer: file.info("mytest.R")
  AnswerTests: omnitest(correctExpr='file.info("mytest.R")')
  Hint: Das geht mit dem Befehl "file.info("mytest.R")"!

# Might add some work with the object returned by file.info.
# I need to think hard about how to allow answers that include
# the argument names.

- Class: text
  Output: Der Befehl kann übrigens auch zusammen mit dem $ Operator verwendet werden, um an spezifische Informationen zu gelangen - also z.B. in der Form file.info("mytest.R")$mode.

- Class: cmd_question
  Output: Ändern Sie nun den Dateinamen von "mytest.R" zu "mytest2.R". Finden Sie heraus wie das geht.
  CorrectAnswer: file.rename("mytest.R", "mytest2.R")
  AnswerTests: any_of_exprs('file.rename("mytest.R", "mytest2.R")', 'file.rename(from = "mytest.R", to = "mytest2.R")')
  Hint: 'Die richtige Antwort lautet: file.rename("mytest.R", "mytest2.R"). Auch hier hilft Google weiter, wenn man z.B. nach "file change name in R". Bei einer Suche in deutscher Sprache, muss man evtl. etwas länger suchen.'

- Class: text
  Output: "Auch hier gilt: Natürlich wäre es viel leichter, den Dateinamen direkt im Betriebssystem zu ändern. Jetzt wissen Sie allerdings auch, wie Sie dies innerhalb von R erledigen können, was bei aufwändigeren Projekten sehr nützlich sein kann. Wenn Sie nun versuchen würden, die Datei mytest.R zu löschen, würde das nicht klappen, weil diese ja soeben umbenannt wurde und darum nicht mehr vorhanden ist."

- Class: cmd_question
  Output: Erstellen Sie nun eine Kopie der Datei "mytest2.R" mit dem Namen "mytest3.R". Finden Sie heraus wie das geht.
  CorrectAnswer: file.copy("mytest2.R", "mytest3.R")
  AnswerTests: any_of_exprs('file.copy("mytest2.R", "mytest3.R")', 'file.copy(from = "mytest2.R", to = "mytest3.R")')
  Hint: Am einfachsten geht das mit file.copy("mytest2.R", "mytest3.R").

- Class: text
  Output: Jetzt liegen zwei Dateien in dem Verzeichnis. Das scheint erstmal eher banal. Aber stellen Sie sich vor, Sie würden mit -zig, oder gar mit Millionen von Dateien arbeiten. Dann wird es fast unausweichlich, die Verarbeitung mit Hilfe eines kleinen Programms zu erledigen. Übrigens, nur zur Erinnerung, Sie können diese Übung jederzeit mit dem Befehl play() vorübergehen unterbrechen und dann mit nxt() wieder zurückkommen.

#- Class: cmd_question
#  Output: Lassen Sie nun den vollständigen Pfadnamen der Datei "mytest3.R" ausgeben. Finden Sie heraus wie das geht.
#  CorrectAnswer: file.path("mytest3.R")
#  AnswerTests: omnitest(correctExpr='file.path("mytest3.R")')
#  Hint: Verwenden Sie file.path("mytest3.R").

- Class: cmd_question
  Output: Und jetzt eine knifflige Aufgabe. Erstellen Sie ein neues Verzeichnis innerhalb des Arbeitsverzeichnisses mit dem Namen "testdir2" und darin ein Unterverzeichnis mit dem Namen "testdir3". Das ganze auch noch in nur einem einzigen Befehl. Finden Sie heraus wie das geht.
  CorrectAnswer: dir.create("testdir2/testdir3", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='dir.create("testdir2/testdir3", recursive = TRUE)')
  Hint: Verwenden Sie dir.create("testdir2/testdir3", recursive = TRUE). Wenn Sie das Argument "recursive=TRUE" nicht angegeben haben, sah es trotzdem so aus als hätte der Befehl funktioniert. Woran liegt das?

- Class: cmd_question
  Output: Löschen Sie das Verzeichnis "testdir2" wieder. Finden Sie heraus wie das geht.
  CorrectAnswer: unlink("testdir2", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='unlink("testdir2", recursive = TRUE)')
  Hint: Verwenden Sie den Befehl unlink("testdir2", recursive = TRUE). 

- Class: text
  Output: Auch hier ist wieder das Argument "recursive = TRUE" notwendig. Andernfalls gibt R eine Warnung aus, dass das Verzeichnis nicht leer ist. R geht also davon aus, dass wenn Sie nicht explizit angeben, dass das Löschen rekursiv erfolgen soll, Ihnen nicht bewusst ist, dass das Verzeichnis nicht leer ist. Deshalb versucht R Sie davor zu bewahren, einen Fehler zu machen.

- Class: text
  Output: Und warum heißt der Befehl "unlink" und nicht wie man vielleicht erwarten könnte "dir.delete" oder "dir.remove"? Das hat vor allem historische Gründe. In Unix-Systemen hieß der Befehl traditioneller Weise immer "unlink".

- Class: cmd_question
  Output: Stellen Sie jetzt das Arbeitsverzeichnis wieder auf den ursprünglichen Namen zurück. Wir hatten den Pfadnamen in der Variable old.dir abgespeichert. Den Befehl, um das Arbeitsverzeichnis zu ändern, kennen Sie bereits.
  CorrectAnswer: setwd(old.dir)
  AnswerTests: omnitest(correctExpr='setwd(old.dir)')
  Hint: Verwenden Sie setwd(old.dir).

- Class: text
  Output: Ein solches Vorgehen kann oft hilfreich sein. Sie speichern den aktuellen Stand ab, spielen dann ein wenig herum und stellen abschließend den ursprünglichen Zustand wieder her. Das passiert häufig in Funktionen, wenn z.B. verschiedene Parameter der Grafikausgabe mit par() zunächst in einer Variable gesichert werden und abschließend nach einigen Änderungen wieder hergestellt werden. 

- Class: cmd_question
  Output: Löschen Sie nun das Verzeichnis "testdir", welches Sie soeben verlassen haben (und auch alles was in diesem Verzeichnis liegt). Den Befehl kennen Sie bereits.
  CorrectAnswer: unlink("testdir", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='unlink("testdir", recursive = TRUE)')
  Hint: Verwenden Sie unlink("testdir", recursive = TRUE).

- Class: text
  Output: In dieser Übung haben Sie gelernt mit dem Arbeitsbereich und dem Dateisystem in R umzugehen.
