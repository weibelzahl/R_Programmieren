- Class: meta
  Course: R Programming
  Lesson: vapply and tapply
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: "In der letzten Übung haben Sie die beiden grundlegendsten '*apply-Funktionen' kennen gelernt: lapply() und sapply(). Beide nehmen eine Liste als Argument an, wenden eine Funktion auf jedes Element der Liste an und geben dann gebündelt das Ergebnis aus. lapply() gibt immer eine Liste aus, sapply() hingegen versucht das Ergebnis zu vereinfachen."

- Class: text
  Output: In dieser Übung werden Sie lernen, wie Sie die Funktionen vapply() und tapply() nutzen, die beide einem sehr spezifischen Zweck in der "Split-Apply-Combine methodology" dienen. Wir werden wieder den Datensatz "Flags" benutzen.

- Class: text
  Output: 'Der Datensatz "Flags" der "UCI Machine Learning Repository" enthält Details verschiedener Nationen und Ihrer Flaggen. Mehr Informationen (in englischer Sprache) finden Sie auf folgender Website: http://archive.ics.uci.edu/ml/datasets/Flags'

- Class: text
  Output: Die Daten sind in einer Variable namens "flags" gespeichert. Wenn es einige Zeit her ist, dass Sie die 'lapply und sapply' Übung abgeschlossen haben, sollten Sie sich erneut mit Hilfe von Funktionen wie dim(), head(), str() und summary() mit den Daten vertraut machen, sobald die Eingabeaufforderung erscheint (>). Sie können auch viewinfo() eintippen, um eine Dokumentation über den Datensatz aufzurufen. Fangen wir an!

- Class: cmd_question
  Output: Wie Sie in der letzten Übung gesehen haben, gibt die Funktion unique() einen Vektor aller in einem Objekt vorkommenden voneinander verschiedenen Werte bzw. Ausprägungen aus. Deswegen ist das Ergebnis von sapply(flags, unique) eine Liste, die für jede Spalte des Datensatzes einen Vektor enthält, in dem die in der jeweiligen Spalte vorkommenden voneinander verschiedenen Werte aufgeführt sind. Schauen Sie sich das Ergebnis dieses Befehls jetzt noch einmal an.
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Tippen Sie sapply(flags, unique) in die Konsole.

- Class: text
  Output: Nehmen wir an, Sie haben vergessen, was die Funktion unique() bewirkt und fälschlicherweise gedacht, sie würde Ihnen die Anzahl der einmaligen Werte, die in einem Objekt enthalten sind, ausgeben. Dann würden Sie erwartet haben, dass das Ergebnis von sapply(flags, unique) ein numerischer Vektor ist, da jedes Element der Liste eine einzelne Zahl wäre und sapply() diese Liste dann zu einem Vektor vereinfachen könnte.

- Class: text
  Output: Wenn Sie interaktiv arbeiten, ist das kein großes Problem, da Sie das Ergebnis sofort sehen und schnell Ihren Fehler erkennen werden. Wenn Sie jedoch nicht interaktiv arbeiten (z.B. wenn Sie eine eigene Funktion schreiben), kann ein Missverständnis unentdeckt bleiben und zu fehlerhaften späteren Ergebnisse führen. Deswegen könnten Sie den Wunsch haben, vorsichtiger zu sein, und dies ist die Stelle, an der vapply() nützlich ist. 

- Class: text
  Output: sapply() versucht das richtige Format zu 'erraten', vapply() hingegen erlaubt es Ihnen, das Format explizit zu spezifizieren. Wenn das Ergebnis nicht mit dem von Ihnen angegebenen Format übereinstimmt, wir vapply() eine Fehlermeldung ausgeben, die die Operation stoppt. Das kann bedeutsame Probleme in Ihrem Kode verhindern, die daran liegen, dass Sie unerwartete Werte als Ergebnis von sapply() erhalten.

- Class: cmd_question
  Output: Probieren Sie den Befehl vapply(flags, unique, numeric(1)) aus, der besagt, dass Sie erwarten, dass jedes Element des Ergebnisses ein numerischer Vektor der Länge 1 ist. Da dies nicht der Fall ist, werden Sie eine FEHLERMELDUNG erhalten! Tippen Sie ok(), nachdem Sie die Fehlermeldung erhalten haben, um mit der nächsten Frage fortzufahren. 
  CorrectAnswer: ok()
  AnswerTests: omnitest(correctExpr="ok()")
  Hint: Tippen Sie vapply(flags, unique, numeric(1)) und danach ok() um mit der nächsten Frage fortzufahren.

- Class: cmd_question
  Output: In der letzten Übung haben wir gesehen, dass sapply(flags, class) uns einen 'character vector' ausgibt, der für jede Spalte (Variable) des Datensatzes die entsprechende Kategorie angibt. Schauen Sie sich das Ergebnis erneut an.
  CorrectAnswer: sapply(flags, class)
  AnswerTests: omnitest(correctExpr="sapply(flags, class)")
  Hint: Tippen Sie sapply(flags, class) um einen 'character vector' der Kategorien, in die die jeweiligen Spalten fallen, zu erhalten.

- Class: cmd_question
  Output: Wenn wir explizit das erwartete Format des Ergebnisses angeben möchten, können wir den Befehl vapply(flags, class, character(1)) nutzen. Das Argument 'character(1)' sagt R, dass wir erwarten, dass die Funktion class uns für jede Spalte, auf die sie angewendet wird, einen 'character vector' der Länge 1 ausgibt. Probieren Sie den Befehl jetzt aus.
  CorrectAnswer: vapply(flags, class, character(1))
  AnswerTests: omnitest(correctExpr="vapply(flags, class, character(1))")
  Hint: Nutzen Sie den Befehl vapply(flags, class, character(1)) um einen 'character vector' der Kategorien der Spalten (Variablen) zu erhalten.

- Class: text
  Output: Beachten Sie, dass - da unsere Erwartung richtig war - die Ergebnisse von vapply() und sapply() identisch sind. Wir erhalten jeweils einen 'character vector' der Kategorien der Spalten.

- Class: text
  Output: Sie denken, wahrscheinlich, dass vapply() "sicherer" als sapply() ist, da es Sie zwingt, das erwartete Format anzugeben, anstatt R "raten" zu lassen. Zudem ist die Ausführung des Befehls vapply() bei großen Datensätzen oft schneller als die des Befehls sapply(). Wenn Sie interaktiv arbeiten, spart Ihnen sapply() allerdings einiges an Tipparbeit und wird in der Regel gut genug sein.

- Class: text
  Output: Als Statistiker werden Sie oft Ihre Daten anhand der Werte einer Variable in Gruppen teilen wollen und dann eine Funktion auf die Mitglieder jeder Gruppe anwenden wollen. Mit der nächsten Funktion, tapply(), kann man genau das machen.

- Class: cmd_question
  Output: Rufen Sie mit ?tapply die Dokumentation auf.
  CorrectAnswer: ?tapply
  AnswerTests: any_of_exprs('?tapply', 'help(tapply)')
  Hint: Rufen Sie die Hilfeseite mit ?tapply auf.

- Class: cmd_question
  Output: Die Variable 'landmass' in unserem Datensatz nimmt Werte zwischen 1 un 6 an, wobei jeder Wert einen anderen Teil der Welt repräsentiert. Nutzen Sie den Befehl table(flags$landmass) um zu sehen, wie viele Flaggen/Länder in jede Gruppe fallen.
  CorrectAnswer: table(flags$landmass)
  AnswerTests: omnitest(correctExpr="table(flags$landmass)")
  Hint: Nutzen Sie den Befehl table(flags$landmass) um zu sehen, wie viele Flaggen/Länder in jede Gruppe fallen.

- Class: cmd_question
  Output: Die Variable 'animate' nimmt den Wert 1 an, wenn die Flagge eines Landes ein Abbild von etwas Lebendigem (z.B. ein Vogel, ein Baum, eine menschliche Hand) enthält, und andernfalls den Wert 0. Untersuchen Sie mit dem Befehl table(flags$animate), wie viele Flaggen ein Abbild von etwas Lebendigem enthalten.
  CorrectAnswer: table(flags$animate)
  AnswerTests: omnitest(correctExpr="table(flags$animate)")
  Hint: Nutzen Sie table(flags$animate) um zu sehen, wie viele Flaggen ein Abbild von etwas Lebendigem enthalten.

- Class: text
  Output: Wir können nun sehen, dass 39 Flaggen ein Abbild von etwas Lebendigem enthalten (animate = 1) und 155 kein Abbild von etwas Lebendigem enthalten (animate = 0).

- Class: cmd_question
  Output: Wenn Sie das arithmetische Mittel einer Menge von 0en und 1en berechnen, bekommen Sie die relative Häufigkeit an 1en. Nutzen Sie tapply(flags$animate, flags$landmass, mean) um die Funktion 'mean' separat für jede der sechs Gruppen der Variable 'landmass' auf die Variable 'animate' anzuwenden. Damit erhalten Sie die bedingte relative Häufigkeit der Flaggen mit einem Abbild von etwas Lebendigen in Bezug auf den Erdteil, zu dem das Land gehört.
  CorrectAnswer: tapply(flags$animate, flags$landmass, mean)
  AnswerTests: omnitest(correctExpr="tapply(flags$animate, flags$landmass, mean)")
  Hint: tapply(flags$animate, flags$landmass, mean) gibt uns die relative Häufigkeit der Flaggen mit einem Abbild von etwas Lebendigen innerhalb jedes Erdteils.

- Class: text
  Output: Die erste Gruppe (landmass = 1) besteht aus den Ländern Nordamerikas und hat die höchste relative Häufigkeit an Flaggen mit einem Abbild von etwas Lebendigem (0.4194).

- Class: cmd_question
  Output: Auf vergleichbare Art und Weise können wir uns die Zusammenfassung der Einwohnerzahl (in Millionen) von Ländern mit und ohne die Farbe Rot in ihrer Flagge anschauen. Hierfür benötigen wir den Befehl tapply(flags$population, flags$red, summary).
  CorrectAnswer: tapply(flags$population, flags$red, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$red, summary)")
  Hint: Tippen Sie tapply(flags$population, flags$red, summary) in die Konsole.

- Class: mult_question  
  Output: Was ist die mittlere Einwohnerzahl (in Millionen) der Länder ohne die Farbe Rot in ihrer Flagge?
  AnswerChoices: 9.0; 4.0; 27.6; 3.0; 22.1; 0.0
  CorrectAnswer: 3.0
  AnswerTests: omnitest(correctVal= '3.0')
  Hint: Nutzen Sie das Ergebnis der vorherigen Frage. Erinnern Sie sich daran, dass red = 0 bedeutet, dass die Farbe Rot nicht in der Flagge vorkommt. 
  
- Class: cmd_question
  Output: Zuletzt verwenden wir denselben Ansatz, um eine Zusammenfassung der Einwohnerzahlen für jeden der sechs Erdteile zu erhalten. Geben Sie den benötigten Befehl jetzt ein.
  CorrectAnswer: tapply(flags$population, flags$landmass, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$landmass, summary)")
  Hint: "Sie erhalten eine Zusammenfassung der Einwohnerzahlen für jeden der sechs Erdteile, wenn Sie tapply() mit folgenden Argumenten anwenden: flags$population, flags$landmass, and summary."

- Class: mult_question  
  Output: Was ist die maximale Einwohnerzahl (in Millionen) für die vierte Gruppe der Variable 'landmass' (Afrika)?
  AnswerChoices: 56.00; 1010.0; 119.0; 5.00; 157.00
  CorrectAnswer: 56.00
  AnswerTests: omnitest(correctVal= '56.00')
  Hint: Nutzen Sie den Output der vorherigen Frage.

- Class: text  
  Output: In dieser Übung haben Sie vapply() als sicherere Alternative zu sapply() kennen gelernt, die vor allem dann hilfreich ist, wenn Sie eigene Funktionen schreiben. Sie haben weiterhin gelernt, wie Sie tapply() nutzen können, um Ihren Datensatz anhand der Ausprägungen in einer Variablen zu teilen und dann eine Funktion auf jede Gruppe anzuwenden. Diese Funktionen werden sich auf Ihrem Weg zu einem besseren Statistiker nützlich erweisen.
