- Class: meta
  Course: R Programming
  Lesson: lapply and sapply
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: In dieser Übung werden Sie lernen, mit den Funktionen lapply() und sapply() zu arbeiten, den beiden wichtigsten '*apply-Funktionen' bzw. 'Schleifenfunktionen'.

- Class: text
  Output: Diese Funktionen bieten eine wenig aufwändige und damit zweckmäßige Möglichkeit, die 'Split-Apply-Combine'-Strategie in R anzuwenden.

- Class: text
  Output: Jede der *apply-Funktionen teilt Datensätze in kleinere Teile ('split'), wendet eine Funktion auf jeden der Teile an ('apply') und bündelt bzw. verknüpft dann die Ergebnisse ('combine'). 

- Class: text
  Output: "In dieser Übung werden wir den Datensatz 'Flags' der 'UCI Machine Learning Repository' verwenden. Dieser Datensatz enthält Details verschiedener Länder und ihrer Flaggen. Mehr Informationen (in englischer Sprache) können Sie auf der folgenden Website finden: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: Fangen wir direkt an, sodass Sie ein Gefühl dafür bekommen, wie diese speziellen Funktionen arbeiten.

- Class: cmd_question
  Output: Die Daten sind in einer Variable namens 'flags' gespeichert. Tippen Sie head(flags) um die ersten sechs Zeilen des Datensatzes zu sehen.
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  Hint: Tippen Sie head(flags) um die ersten sechs Zeilen des Datensatzes zu sehen.

- Class: cmd_question
  Output: Wahrscheinlich müssen Sie hochscrollen um den kompletten Output zu sehen. Untersuchen Sie jetzt die Dimensionen des Datensatzes mit dim(flags).
  CorrectAnswer: dim(flags)
  AnswerTests: omnitest(correctExpr='dim(flags)')
  Hint: Tippen Sie dim(flags) in die Konsole.

- Class: text
  Output: Der Output sagt uns, dass es 194 Zeilen bzw. Beobachtungen und 30 Spalten bzw. Variablen gibt. Jede Beobachtung ist eine Nation und jede Variable beschreibt eine Eigenschaft des Landes oder seiner Flagge. Um eine genauere Beschreibung (in englischer Sprache) zu bekommen, können Sie viewinfo() tippen, sobald die Eingabeaufforderung erscheint (>).

- Class: cmd_question
  Output: Wie bei jedem Datensatz interessiert uns, in welchem Format die Variablen gespeichert wurden bzw. zu welcher Kategorie die Variablen gehören. Was passiert, wenn wir class(flags) eingeben? Probieren Sie es aus.
  CorrectAnswer: class(flags)
  AnswerTests: omnitest(correctExpr='class(flags)')
  Hint: Tippen Sie class(flags) um zu sehen, was passiert. 

- Class: text
  Output: Wir erfahren nur, dass der ganze Datensatz in Form eines 'data frame' gespeichert ist, was nicht unsere Frage beantwortet. Stattdessen brauchen wir das Ergebnis, wenn die Funktion class() auf jede einzelne Spalte des Datensatzes angewendet wird. Obwohl wir dies manuell machen könnten (also mit jedem Befehl nur eine Spalte untersuchen), erhalten wir das Ergebnis viel schneller, wenn wir den Prozess automatisieren können. Klingt wie eine Programmschleife!

- Class: text
  Output: Die Funktion lapply() nimmt eine Liste als Input, wendet eine Funktion auf jedes Element der Liste an und gibt dann eine Liste derselben Länge wie die Originalliste aus. Da ein 'data frame' nichts anderes ist als eine Liste von Vektoren (Sie können dies mit dem Befehl as.list(flags) prüfen), können wir lapply() nutzen, um die Funktion class() auf jede Spalte des Datensatzes anzuwenden. Schauen wir uns das in Aktion an!

- Class: cmd_question
  Output: Tippen Sie cls_list <- lapply(flags, class) um die Funktion class() auf jede Spalte des Datensatzes anzuwenden und das Ergebnis in der Variable cls_list zu speichern. Beachten Sie, dass Sie nur den Namen der Funktion, die Sie anwenden wollen, eingeben - ohne die üblichen Klammern.
  CorrectAnswer: cls_list <- lapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_list <- lapply(flags, class)')
  Hint: Tippen Sie cls_list <- lapply(flags, class) um die Funktion class() auf jede Spalte des Datensatzes anzuwenden und das Ergebnis in der Variable cls_list zu speichern.

- Class: cmd_question
  Output: Tippen Sie cls_list um sich das Ergebnis anzusehen.
  CorrectAnswer: cls_list
  AnswerTests: omnitest(correctExpr='cls_list')
  Hint: Tippen Sie cls_list um sich das Ergebnis anzusehen.

- Class: cmd_question
  Output: Das 'lÄ in 'lapply' steht für 'list' (Liste). Tippen Sie class(cls_list) um sich zu versichern, dass lapply() eine Liste ausgibt.
  CorrectAnswer: class(cls_list)
  AnswerTests: omnitest(correctExpr='class(cls_list)')
  Hint: Tippen Sie class(cls_list) um sich zu versichern, dass lapply() eine Liste ausgibt.

- Class: text
  Output: Wie erwartet haben wir eine Liste der Länge 30 erhalten - ein Element für jede Variable/Spalte. Der Output wäre erheblich kompakter, wenn wir das Ergebnis als Vektor und nicht als Liste erhalten würden.

- Class: cmd_question
  Output: Sie erinnern sich vielleicht daran, dass Listen vor allem hilfreich sind, um Daten verschiedener Kategorien zu speichern. In diesem Fall kann, da jedes Element der Ergebnisliste ein 'character vector' der Länge 1 ist, cls_list zu einem 'character vector' vereinfacht werden. Um dies manuell zu machen, tippen Sie as.character(cls_list) in das Eingabefeld.
  CorrectAnswer: as.character(cls_list)
  AnswerTests: omnitest(correctExpr='as.character(cls_list)')
  Hint: Tippen Sie as.character(cls_list) um cls_list in einen 'character vector' zu verwandeln.

- Class: cmd_question
  Output: sapply() erlaubt Ihnen, diesen Prozess zu automatisieren, indem sie lapply() anwendet und dann versucht, das Ergebnis für Sie zu vereinfachen (daher das 's' von 'to simplify' in 'sapply'). Nutzen Sie sapply() auf dieselbe Art und Weise wie lapply, um die Kategorie jeder Variable des Datensatzes zu bekommen und speichern Sie das Ergebnis in cls_vect. Wenn Sie Hilfe benötigen, rufen Sie die Dokumentation auf (?sapply).
  CorrectAnswer: cls_vect <- sapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_vect <- sapply(flags, class)')
  Hint: Tippen Sie cls_vect <- sapply(flags, class) um die Kategorien der Variablen/Spalten in einem Vektor namens cls_vect zu speichern.

- Class: cmd_question
  Output: Use class(cls_vect) to confirm that sapply() simplified the result to a character vector.
  CorrectAnswer: class(cls_vect)
  AnswerTests: omnitest(correctExpr='class(cls_vect)')
  Hint: Type class(cls_vect) to confirm that sapply() returned a character vector.

- Class: text
  Output: In general, if the result is a list where every element is of length one, then sapply() returns a vector. If the result is a list where every element is a vector of the same length (> 1), sapply() returns a matrix. If sapply() can't figure things out, then it just returns a list, no different from what lapply() would give you.

- Class: text
  Output: Let's practice using lapply() and sapply() some more!

- Class: text
  Output: Columns 11 through 17 of our dataset are indicator variables, each representing a different color. The value of the indicator variable is 1 if the color is present in a country's flag and 0 otherwise.

- Class: cmd_question
  Output:  Therefore, if we want to know the total number of countries (in our dataset) with, for example, the color orange on their flag, we can just add up all of the 1s and 0s in the 'orange' column. Try sum(flags$orange) to see this.
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  Hint: Use sum(flags$orange) to add up all of the 1s and 0s in the 'orange' column.

- Class: text
  Output: Now we want to repeat this operation for each of the colors recorded in the dataset.

- Class: cmd_question
  Output: First, use flag_colors <- flags[, 11:17] to extract the columns containing the color data and store them in a new data frame called flag_colors. (Note the comma before 11:17. This subsetting command tells R that we want all rows, but only columns 11 through 17.)
  CorrectAnswer: flag_colors <- flags[, 11:17]
  AnswerTests: omnitest(correctExpr='flag_colors <- flags[, 11:17]')
  Hint: flag_colors <- flags[, 11:17] will get the job done!

- Class: cmd_question
  Output: Use the head() function to look at the first 6 lines of flag_colors.
  CorrectAnswer: head(flag_colors)
  AnswerTests: omnitest(correctExpr='head(flag_colors)')
  Hint: head(flag_colors) will display the first six lines of flag_colors.

- Class: cmd_question
  Output: To get a list containing the sum of each column of flag_colors, call the lapply() function with two arguments. The first argument is the object over which we are looping (i.e. flag_colors) and the second argument is the name of the function we wish to apply to each column (i.e. sum). Remember that the second argument is just the name of the function with no parentheses, etc.
  CorrectAnswer: lapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='lapply(flag_colors, sum)')
  Hint: Use lapply(flag_colors, sum) to return the sum of each column.

- Class: text
  Output: This tells us that of the 194 flags in our dataset, 153 contain the color red, 91 contain green, 99 contain blue, and so on.

- Class: cmd_question
  Output: The result is a list, since lapply() always returns a list. Each element of this list is of length one, so the result can be simplified to a vector by calling sapply() instead of lapply(). Try it now.
  CorrectAnswer: sapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, sum)')
  Hint: Use sapply(flag_colors, sum) to return a vector of column sums.

- Class: text
  Output: Perhaps it's more informative to find the proportion of flags (out of 194) containing each color. Since each column is just a bunch of 1s and 0s, the arithmetic mean of each column will give us the proportion of 1s. (If it's not clear why, think of a simpler situation where you have three 1s and two 0s -- (1 + 1 + 1 + 0 + 0)/5 = 3/5 = 0.6).

- Class: cmd_question
  Output: Use sapply() to apply the mean() function to each column of flag_colors. Remember that the second argument to sapply() should just specify the name of the function (i.e. mean) that you want to apply.
  CorrectAnswer: sapply(flag_colors, mean)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, mean)')
  Hint: sapply(flag_colors, mean) will do the trick!

- Class: text
  Output: In the examples we've looked at so far, sapply() has been able to simplify the result to vector. That's because each element of the list returned by lapply() was a vector of length one. Recall that sapply() instead returns a matrix when each element of the list returned by lapply() is a vector of the same length (> 1).

- Class: cmd_question
  Output: To illustrate this, let's extract columns 19 through 23 from the flags dataset and store the result in a new data frame called flag_shapes. flag_shapes <- flags[, 19:23] will do it.
  CorrectAnswer: flag_shapes <- flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes <- flags[, 19:23]')
  Hint: flag_shapes <- flags[, 19:23] will save columns 19 through 23 in a new variable.

- Class: text
  Output: Each of these columns (i.e. variables) represents the number of times a particular shape or design appears on a country's flag. We are interested in the minimum and maximum number of times each shape or design appears.

- Class: cmd_question
  Output: The range() function returns the minimum and maximum of its first argument, which should be a numeric vector. Use lapply() to apply the range function to each column of flag_shapes. Don't worry about storing the result in a new variable. By now, we know that lapply() always returns a list.
  CorrectAnswer: lapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='lapply(flag_shapes, range)')
  Hint: Try lapply(flag_shapes, range) to apply the range() function to each column of flag_shapes.

- Class: cmd_question
  Output: Do the same operation, but using sapply() and store the result in a variable called shape_mat.
  CorrectAnswer: shape_mat <- sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='shape_mat <- sapply(flag_shapes, range)')
  Hint: shape_mat <- sapply(flag_shapes, range) will apply the range() function to each column of flag_shapes and store the result in shape_mat.

- Class: cmd_question
  Output: View the contents of shape_mat.
  CorrectAnswer: shape_mat
  AnswerTests: any_of_exprs('shape_mat', 'print(shape_mat)')
  Hint: Type shape_mat to view its contents.

- Class: text
  Output: Each column of shape_mat gives the minimum (row 1) and maximum (row 2) number of times its respective shape appears in different flags.

- Class: cmd_question
  Output: Use the class() function to confirm that shape_mat is a matrix.
  CorrectAnswer: class(shape_mat)
  AnswerTests: omnitest(correctExpr='class(shape_mat)')
  Hint: class(shape_mat) returns the class of shape_mat.

- Class: text
  Output: As we've seen, sapply() always attempts to simplify the result given by lapply(). It has been successful in doing so for each of the examples we've looked at so far. Let's look at an example where sapply() can't figure out how to simplify the result and thus returns a list, no different from lapply().

- Class: cmd_question
  Output: When given a vector, the unique() function returns a vector with all duplicate elements removed. In other words, unique() returns a vector of only the 'unique' elements. To see how it works, try unique(c(3, 4, 5, 5, 5, 6, 6)).
  CorrectAnswer: unique(c(3, 4, 5, 5, 5, 6, 6))
  AnswerTests: omnitest(correctExpr='unique(c(3, 4, 5, 5, 5, 6, 6))')
  Hint: Do unique(c(3, 4, 5, 5, 5, 6, 6)) to see how the unique() function works.

- Class: cmd_question
  Output: We want to know the unique values for each variable in the flags dataset. To accomplish this, use lapply() to apply the unique() function to each column in the flags dataset, storing the result in a variable called unique_vals.
  CorrectAnswer: unique_vals <- lapply(flags, unique)
  AnswerTests: omnitest(correctExpr='unique_vals <- lapply(flags, unique)')
  Hint: Try unique_vals <- lapply(flags, unique).

- Class: cmd_question
  Output: Print the value of unique_vals to the console.
  CorrectAnswer: unique_vals
  AnswerTests: any_of_exprs('unique_vals', 'print(unique_vals)')
  Hint: Type unique_vals to view its contents.

- Class: cmd_question
  Output: "Since unique_vals is a list, you can use what you've learned to determine the length of each element of unique_vals (i.e. the number of unique values for each variable). Simplify the result, if possible. Hint: Apply the length() function to each element of unique_vals."
  CorrectAnswer: sapply(unique_vals, length)
  AnswerTests: omnitest(correctExpr='sapply(unique_vals, length)')
  Hint: Apply the length() function to each element of the unique_vals list using sapply(). Remember, no parentheses after the name of the function you are applying (i.e. length).

- Class: text
  Output: The fact that the elements of the unique_vals list are all vectors of *different* length poses a problem for sapply(), since there's no obvious way of simplifying the result.

- Class: cmd_question
  Output: Use sapply() to apply the unique() function to each column of the flags dataset to see that you get the same unsimplified list that you got from lapply().
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Use sapply(flags, unique) to apply the unique function to each column of flags, failing to simplify the result.

- Class: text
  Output: Occasionally, you may need to apply a function that is not yet defined, thus requiring you to write your own. Writing functions in R is beyond the scope of this lesson, but let's look at a quick example of how you might do so in the context of loop functions.

- Class: text
  Output: Pretend you are interested in only the second item from each element of the unique_vals list that you just created. Since each element of the unique_vals list is a vector and we're not aware of any built-in function in R that returns the second element of a vector, we will construct our own function.

- Class: cmd_question
  Output: lapply(unique_vals, function(elem) elem[2]) will return a list containing the second item from each element of the unique_vals list. Note that our function takes one argument, elem, which is just a 'dummy variable' that takes on the value of each element of unique_vals, in turn.
  CorrectAnswer: lapply(unique_vals, function(elem) elem[2])
  AnswerTests: calculates_same_value('lapply(unique_vals, function(elem) elem[2])')
  Hint: Use lapply(unique_vals, function(elem) elem[2]) to return a list containing the second item from each element of the unique_vals list.

- Class: text
  Output: The only difference between previous examples and this one is that we are defining and using our own function right in the call to lapply(). Our function has no name and disappears as soon as lapply() is done using it. So-called 'anonymous functions' can be very useful when one of R's built-in functions isn't an option.

- Class: text
  Output: In this lesson, you learned how to use the powerful lapply() and sapply() functions to apply an operation over the elements of a list. In the next lesson, we'll take a look at some close relatives of lapply() and sapply().
