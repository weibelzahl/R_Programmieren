- Class: meta
  Course: R Programming
  Lesson: lapply and sapply
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: In dieser Übung werden Sie lernen, mit den Funktionen lapply() und sapply() zu arbeiten, den beiden wichtigsten '*apply-Funktionen' bzw. 'Schleifenfunktionen'.

- Class: text
  Output: Diese Funktionen bieten eine wenig aufwändige und damit zweckmäßige Möglichkeit, die 'Split-Apply-Combine'-Strategie in R anzuwenden.

- Class: text
  Output: Jede der *apply-Funktionen teilt Datensätze in kleinere Teile ('split'), wendet eine Funktion auf jeden der Teile an ('apply') und bündelt bzw. verknüpft dann die Ergebnisse ('combine'). 

- Class: text
  Output: "In dieser Übung werden wir den Datensatz 'Flags' der 'UCI Machine Learning Repository' verwenden. Dieser Datensatz enthält Details verschiedener Länder und ihrer Flaggen. Mehr Informationen (in englischer Sprache) können Sie auf der folgenden Website finden: http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: Fangen wir direkt an, sodass Sie ein Gefühl dafür bekommen, wie diese speziellen Funktionen arbeiten.

- Class: cmd_question
  Output: Die Daten sind in einer Variable namens 'flags' gespeichert. Tippen Sie head(flags) um die ersten sechs Zeilen des Datensatzes zu sehen.
  CorrectAnswer: head(flags)
  AnswerTests: omnitest(correctExpr='head(flags)')
  Hint: Tippen Sie head(flags) um die ersten sechs Zeilen des Datensatzes zu sehen.

- Class: cmd_question
  Output: Wahrscheinlich müssen Sie hochscrollen um den kompletten Output zu sehen. Untersuchen Sie jetzt die Dimensionen des Datensatzes mit dim(flags).
  CorrectAnswer: dim(flags)
  AnswerTests: omnitest(correctExpr='dim(flags)')
  Hint: Tippen Sie dim(flags) in die Konsole.

- Class: text
  Output: Der Output sagt uns, dass es 194 Zeilen bzw. Beobachtungen und 30 Spalten bzw. Variablen gibt. Jede Beobachtung ist eine Nation und jede Variable beschreibt eine Eigenschaft des Landes oder seiner Flagge. Um eine genauere Beschreibung (in englischer Sprache) zu bekommen, können Sie viewinfo() tippen, sobald die Eingabeaufforderung erscheint (>).

- Class: cmd_question
  Output: Wie bei jedem Datensatz interessiert uns, in welchem Format die Variablen gespeichert wurden bzw. zu welcher Kategorie die Variablen gehören. Was passiert, wenn wir class(flags) eingeben? Probieren Sie es aus.
  CorrectAnswer: class(flags)
  AnswerTests: omnitest(correctExpr='class(flags)')
  Hint: Tippen Sie class(flags) um zu sehen, was passiert. 

- Class: text
  Output: Wir erfahren nur, dass der ganze Datensatz in Form eines 'data frame' gespeichert ist, was nicht unsere Frage beantwortet. Stattdessen brauchen wir das Ergebnis, wenn die Funktion class() auf jede einzelne Spalte des Datensatzes angewendet wird. Obwohl wir dies manuell machen könnten (also mit jedem Befehl nur eine Spalte untersuchen), erhalten wir das Ergebnis viel schneller, wenn wir den Prozess automatisieren können. Klingt wie eine Programmschleife!

- Class: text
  Output: Die Funktion lapply() nimmt eine Liste als Input, wendet eine Funktion auf jedes Element der Liste an und gibt dann eine Liste derselben Länge wie die Originalliste aus. Da ein 'data frame' nichts anderes ist als eine Liste von Vektoren (Sie können dies mit dem Befehl as.list(flags) prüfen), können wir lapply() nutzen, um die Funktion class() auf jede Spalte des Datensatzes anzuwenden. Schauen wir uns das in Aktion an!

- Class: cmd_question
  Output: Tippen Sie cls_list <- lapply(flags, class) um die Funktion class() auf jede Spalte des Datensatzes anzuwenden und das Ergebnis in der Variable cls_list zu speichern. Beachten Sie, dass Sie nur den Namen der Funktion, die Sie anwenden wollen, eingeben - ohne die üblichen Klammern.
  CorrectAnswer: cls_list <- lapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_list <- lapply(flags, class)')
  Hint: Tippen Sie cls_list <- lapply(flags, class) um die Funktion class() auf jede Spalte des Datensatzes anzuwenden und das Ergebnis in der Variable cls_list zu speichern.

- Class: cmd_question
  Output: Tippen Sie cls_list um sich das Ergebnis anzusehen.
  CorrectAnswer: cls_list
  AnswerTests: omnitest(correctExpr='cls_list')
  Hint: Tippen Sie cls_list um sich das Ergebnis anzusehen.

- Class: cmd_question
  Output: Das 'lÄ in 'lapply' steht für 'list' (Liste). Tippen Sie class(cls_list) um sich zu versichern, dass lapply() eine Liste ausgibt.
  CorrectAnswer: class(cls_list)
  AnswerTests: omnitest(correctExpr='class(cls_list)')
  Hint: Tippen Sie class(cls_list) um sich zu versichern, dass lapply() eine Liste ausgibt.

- Class: text
  Output: Wie erwartet haben wir eine Liste der Länge 30 erhalten - ein Element für jede Variable/Spalte. Der Output wäre erheblich kompakter, wenn wir das Ergebnis als Vektor und nicht als Liste erhalten würden.

- Class: cmd_question
  Output: Sie erinnern sich vielleicht daran, dass Listen vor allem hilfreich sind, um Daten verschiedener Kategorien zu speichern. In diesem Fall kann, da jedes Element der Ergebnisliste ein 'character vector' der Länge 1 ist, cls_list zu einem 'character vector' vereinfacht werden. Um dies manuell zu machen, tippen Sie as.character(cls_list) in das Eingabefeld.
  CorrectAnswer: as.character(cls_list)
  AnswerTests: omnitest(correctExpr='as.character(cls_list)')
  Hint: Tippen Sie as.character(cls_list) um cls_list in einen 'character vector' zu verwandeln.

- Class: cmd_question
  Output: sapply() erlaubt Ihnen, diesen Prozess zu automatisieren, indem sie lapply() anwendet und dann versucht, das Ergebnis für Sie zu vereinfachen (daher das 's' von 'to simplify' in 'sapply'). Nutzen Sie sapply() auf dieselbe Art und Weise wie lapply, um die Kategorie jeder Variable des Datensatzes zu bekommen und speichern Sie das Ergebnis in cls_vect. Wenn Sie Hilfe benötigen, rufen Sie die Dokumentation auf (?sapply).
  CorrectAnswer: cls_vect <- sapply(flags, class)
  AnswerTests: omnitest(correctExpr='cls_vect <- sapply(flags, class)')
  Hint: Tippen Sie cls_vect <- sapply(flags, class) um die Kategorien der Variablen/Spalten in einem Vektor namens cls_vect zu speichern.

- Class: cmd_question
  Output: Nutzen Sie den Befehl class(cls_vect) um zu überprüfen, dass sapply() das Ergebnis zu einem 'character vector' vereinfacht hat.
  CorrectAnswer: class(cls_vect)
  AnswerTests: omnitest(correctExpr='class(cls_vect)')
  Hint: Tippen Sie class(cls_vect) in die Konsole, um zu bestätigen, dass sapply() einen 'character vector' ausgegeben hat.

- Class: text
  Output: Generell gilt, dass sapply() einen Vektor ausgibt, wenn das Ergebnis von lapply() eine Liste ist, in der jedes Element eine Länge von 1 hat. Wenn das Ergebnis eine Liste ist, in der jedes Element dieselbe Länge (>1) hat, gibt sapply() eine Matrix aus. Wenn sapply() aus dem Ergebnis nicht schlau wird, gibt es einfach eine Liste aus - der Output unterscheidet sich dann also nicht von dem bei der Anwendung von lapply().

- Class: text
  Output: Üben wir noch etwas die Anwendung von lapply() und sapply()!

- Class: text
  Output: Die Spalten 11 bis 17 in unserem Datensatz sind Indikatorvariablen, wobei jede eine andere Farbe repräsentiert. Der Wert der Indikatorvariable ist 1, wenn die Farbe in der Flagge des Landes vorkommt, und sonst 0.

- Class: cmd_question
  Output:  Wenn wir also die Anzahl der Länder (in unserem Datensatz) wissen möchten, deren Flagge beispielsweise die Farbe Orange enthält, können wir einfach alle 1en und 0en in der Spalte 'orange' addieren. Versuchen Sie dies mit dem Befehl sum(flags$orange).
  CorrectAnswer: sum(flags$orange)
  AnswerTests: omnitest(correctExpr='sum(flags$orange)')
  Hint: Nutzen Sie sum(flags$orange) um alle 1en und 0en in der Spalte 'orange' zu addieren.

- Class: text
  Output: Nun wollen wir diese Operation für jede Farbe, die in unserem Datensatz vorkommt, wiederholen.

- Class: cmd_question
  Output: "Nutzen Sie zuerst den Befehl flag_colors <- flags[, 11:17] um alle Spalten, die Daten über die Flaggenfarben enthalten, herauszufiltern und in einem neuen 'data frame' namens 'flag_colors' zu speichern. Beachten Sie, dass vor dem 11:17 ein Komma steht. Dies sagt R, dass wir alle Zeilen, aber nur die Spalten 11 bis 17 herausfiltern wollen."
  CorrectAnswer: flag_colors <- flags[, 11:17]
  AnswerTests: omnitest(correctExpr='flag_colors <- flags[, 11:17]')
  Hint: flag_colors <- flags[, 11:17] erstellt den neuen Datensatz!

- Class: cmd_question
  Output: Nutzen Sie die Funktion head(), um sich die ersten 6 Zeilen von flag_colors anzuschauen.
  CorrectAnswer: head(flag_colors)
  AnswerTests: omnitest(correctExpr='head(flag_colors)')
  Hint: head(flag_colors) zeigt Ihnen die ersten sechs Zeilen von flag_colors.

- Class: cmd_question
  Output: Um eine Liste zu bekommen, die die Summe jeder Spalte von flag_colors enthält, benötigen Sie die Funktion lapply() mit zwei Argumenten. Das erste Argument ist das Objekt, über das die Programmschleife läuft (d.h. flag_colors) und das zweite Argument ist der Name der Funktion, die wir anwenden wollen (d.h. sum). Erinnern Sie sich daran, dass Sie nur den Namen der Funktion (ohne Klammern) benötigen.
  CorrectAnswer: lapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='lapply(flag_colors, sum)')
  Hint: Nutzen Sie lapply(flag_colors, sum) um die Summe jeder Spalte zu bekommen. 

- Class: text
  Output: Der Output sagt uns, dass in unserem Datensatz 194 Flaggen vorkommen, von denen 153 die Farbe Rot, 91 die Farbe Grün, 99 die Farbe Blau enthalten usw. 

- Class: cmd_question
  Output: Das Ergebnis ist eine Liste, da lapply() immer eine Liste ausgibt. Jedes Element der Liste hat die Länge 1, sodass das Ergebnis zu einem Vektor vereinfacht werden kann, indem wir sapply() statt lapply() nutzen. Versuchen Sie es aus!
  CorrectAnswer: sapply(flag_colors, sum)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, sum)')
  Hint: Nutzen Sie sapply(flag_colors, sum) um einen Vektor der Spaltensummen zu erhalten. 

- Class: text
  Output: "Vielleicht ist es informativer, die relativen Häufigkeiten der Flaggen, die eine bestimmte Farbe enthalten, zu haben. Da jede Spalte nur eine Menge an 1en und 0en ist, entspricht das arithmetische Mittel jeder Spalte der relativen Häufigkeiten der 1en in der jeweiligen Spalte. (Wenn nicht klar ist warum, stellen Sie sich eine einfachere Situation mit 3 1en und 2 0en vor:(1 + 1 + 1 + 0 + 0)/5 = 3/5 = 0.6)"

- Class: cmd_question
  Output: Nutzen Sie sapply() um die Funktion mean() auf jede Spalte von flag_colors anzuwenden. Erinnern Sie sich daran, dass das zweite Argument in sapply() dem Namen der Funktion, die Sie anwenden wollen, entspricht.
  CorrectAnswer: sapply(flag_colors, mean)
  AnswerTests: omnitest(correctExpr='sapply(flag_colors, mean)')
  Hint: sapply(flag_colors, mean) führt zum richtigen Ergebnis!

- Class: text
  Output: In den Beispielen, die wir uns bisher angeschaut haben, war sapply() immer in der Lage, das Ergebnis zu einem Vektor zu vereinfachen. Das lag daran, dass jedes Element der Liste, die lapply() ausgegeben hat, ein Vektor der Länge 1 war. Erinnern Sie sich daran, dass sapply() eine Matrix ausgibt, wenn jedes Element der Liste ein Vektor gleicher Länge größer 1 ist. 

- Class: cmd_question
  Output: Um dies zu zeigen, wollen wir die Spalten 19 bis 23 aus dem Datensatz flags herausfiltern und in einem neuen 'data frame' names flag_shapes speichern. Hierfür benötigen wir den Befehl flag_shapes <- flags[, 19:23].
  CorrectAnswer: flag_shapes <- flags[, 19:23]
  AnswerTests: omnitest(correctExpr='flag_shapes <- flags[, 19:23]')
  Hint: flag_shapes <- flags[, 19:23] speichert die Spalten 19 bis 23 in einer neuen Variable. 

- Class: text
  Output: Jede dieser Spalten bzw. Variablen repräsentiert die Häufigkeit, mit der eine bestimmte Form oder ein bestimmtes Design in der Flagge eines Landes vorkommt. Wir sind interessiert in der minimalen und maximalen Häufigkeit, mit der jede Form vorkommt.

- Class: cmd_question
  Output: Die Funktion range() gibt das Minimum und Maximum ihres ersten Argumentes aus, welches ein numerischer Vektor sein sollte. Nutzen Sie lapply() um die Funktion range() auf jede Spalte von flag_shapes anzuwenden. Kümmern Sie sich nicht darum, das Ergebnis in einer neuen Variable zu speichern. Wir wissen mittlerweile, dass lapply() immer eine Liste ausgibt.
  CorrectAnswer: lapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='lapply(flag_shapes, range)')
  Hint: Tippen Sie lapply(flag_shapes, range) in die Konsole. 

- Class: cmd_question
  Output: Machen Sie dasselbe nochmal, aber benutzen Sie diesmal die Funktion sapply() und speichern Sie das Ergebnis in einer Variable namens shape_mat.
  CorrectAnswer: shape_mat <- sapply(flag_shapes, range)
  AnswerTests: omnitest(correctExpr='shape_mat <- sapply(flag_shapes, range)')
  Hint: shape_mat <- sapply(flag_shapes, range) wendet die Funktion range() auf jede Spalte von flag_shapes an und speichert das Ergebnis in der Variablen shape_mat.

- Class: cmd_question
  Output: Schauen Sie sich den Inhalt von shape_mat an.
  CorrectAnswer: shape_mat
  AnswerTests: any_of_exprs('shape_mat', 'print(shape_mat)')
  Hint: Tippen Sie shape_mat, um den Inhalt der Variablen zu sehen.

- Class: text
  Output: Jede Spalte von shape_mat gibt die minimale (Spalte 1) und maximale (Spalte 2) Häufigkeit an, mit der die jeweilige Form in verschiedenen Flaggen vorkommt.

- Class: cmd_question
  Output: Vergewissern Sie sich mit der Funktion class(), dass shape_mat eine Matrix ist.
  CorrectAnswer: class(shape_mat)
  AnswerTests: omnitest(correctExpr='class(shape_mat)')
  Hint: class(shape_mat) bestimmt die Kategorie von shape_mat.

- Class: text
  Output: Wie wir gesehen haben, versucht sapply immer das Ergebnis von lapply() zu vereinfachen. Für unsere bisherigen Beispiele war dies immer erfolgreich. Schauen wir uns ein Beispiel an, wo sapply() nicht herausfinden kann, wie das Ergebnis vereinfacht werden kann und deswegen eine Liste ausgibt (nicht anders als lapply).

- Class: cmd_question
  Output: Wenn der Input von unique() ein Vektor ist, gibt die Funktion einen Vektor, in dem alle wiederholt vorkommenden Elemente entfernt sind, aus. Um zu sehen, wie dies funktioniert, schauen Sie sich das Ergebnis des Befehls unique(c(3, 4, 5, 5, 5, 6, 6)).
  CorrectAnswer: unique(c(3, 4, 5, 5, 5, 6, 6))
  AnswerTests: omnitest(correctExpr='unique(c(3, 4, 5, 5, 5, 6, 6))')
  Hint: Tippen Sie unique(c(3, 4, 5, 5, 5, 6, 6)) in die Konsole, um zusehen wie die Funktion arbeitet. 

- Class: cmd_question
  Output: Wir möchten herausfinden, welche verschiedenen Werte die Variablen in unserem Datensatz annehmen. Nutzen Sie lapply(), um die Funktion unique() auf jede Spalte des Datensatzes flags anzuwenden, und speichern Sie das Ergebnis in einer Variablen namens unique_vals.
  CorrectAnswer: unique_vals <- lapply(flags, unique)
  AnswerTests: omnitest(correctExpr='unique_vals <- lapply(flags, unique)')
  Hint: Tippen Sie unique_vals <- lapply(flags, unique) in die Konsole.

- Class: cmd_question
  Output: Lassen Sie sich den Inhalt von unique_vals in der Konsole anzeigen.
  CorrectAnswer: unique_vals
  AnswerTests: any_of_exprs('unique_vals', 'print(unique_vals)')
  Hint: Tippen Sie unique_vals, um den Inhalt von unique_vals zu sehen.

- Class: cmd_question
  Output: "Da unique_vals eine Liste ist, können Sie anwenden, was Sie bisher gelernt haben, um die Länge jedes Elements von unique_vals zu bestimmen (d.h. die Anzahl der verschiedenen Werte jeder Variablen). Vereinfachen Sie das Ergebnis, falls möglich. Tipp: Wenden Sie die Funktion length() auf jedes Element von unique_vals an."
  CorrectAnswer: sapply(unique_vals, length)
  AnswerTests: omnitest(correctExpr='sapply(unique_vals, length)')
  Hint: Wenden Sie mit sapply() die Funktion length() auf jedes Element von unique_vals an. Erinnern Sie sich daran, dass Sie den Namen der Funktion ohne Klammern schreiben müssen.

- Class: text
  Output: Die Tatsache, dass die Elemente von unique_vals Vektoren unterschiedlicher Länge sind, stellt ein Problem für sapply() dar, da es keinen offensichtlichen Weg gibt, das Ergebnis zu vereinfachen.

- Class: cmd_question
  Output: Nutzen Sie sapply(), um die Funktion unique() auf jede Spalte des Datensatzes flags anzuwenden und zu sehen, dass Sie dieselbe Liste bekommen wie bei der Benutzung von lapply().
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Nutzen Sie sapply(flags, unique), um die Funktion unique() auf jede Spalte des Datensatzes flags anzuwenden und zu sehen, dass die Vereinfachen scheitert.

- Class: text
  Output: Hin und wieder kann es vorkommen, dass Sie eine Funktion anwenden müssen, die noch nicht definiert ist und die Sie von daher selber schreiben müssen. Funktionen in R zu schreiben, geht über diese Übung hinaus, aber lassen Sie uns ein einfaches Beispiel anschauen, wie Sie dies im Kontext von Schleifenfunktionen tun können.

- Class: text
  Output: Nehmen Sie an, dass Sie nur am jeweils zweiten Item von jedem Element der Liste unique_vals interessiert sind. Da jedes Element von unique_vals ein Vektor ist und wir keine Funktion in R kennen, dass uns das zweite Element eines Vektors ausgibt, werden wir unseren eigene Funktion konstruieren.

- Class: cmd_question
  Output: lapply(unique_vals, function(elem) elem[2]) gibt uns eine Liste aus, die das zweite Item von jedem Element der Liste unique_vals enthält. Beachten Sie, dass unsere Funktion ein Argument - elem - hat, welches nur eine 'Dummy-Variable' ist, die den Wert eines jeden Elementes von unique_vals annimmt.
  CorrectAnswer: lapply(unique_vals, function(elem) elem[2])
  AnswerTests: calculates_same_value('lapply(unique_vals, function(elem) elem[2])')
  Hint: Tippen Sie lapply(unique_vals, function(elem) elem[2]) in die Konsole.

- Class: text
  Output: Der einzige Unterschied zwischen dem vorherigen und diesem Beispiel ist, dass wir unsere eigene Funktion in der Funktion lapply() definieren und nutzen. Unsere Funktion hat keinen Namen und verschwindet wieder, sobald lapply() diese Funktion nicht mehr braucht. Diese sogenannten 'anonymous functions' können sehr nützlich sein, wenn die in R vorhandenen Funktion nicht ausreichend sind. 

- Class: text
  Output: In dieser Übung haben Sie gelernt, mit den Funktionen lapply() und sapply() zu arbeiten und eine Operation auf alle Elemente einer Liste anzuwenden. In der nächsten Übung werden wir zwei enge Verwandte - vapply() und tapply() - kennen lernen.
