- Class: meta
  Course: R Programming
  Lesson: Sequences of Numbers
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: In dieser Übung werden Sie lernen, eine Zahlenfolge in R zu erstellen.

- Class: cmd_question
  Output: Am einfachsten geht das mit dem Operator `:`. Tippen Sie '1:20', um das auszuprobieren.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Tippen Sie einfach '1:20' ohne Leerzeichen und ohne Anführungszeichen. Achtung, das Zeichen in der Mitte ist ein Doppelpunkt und kein Strichpunkt.

- Class: cmd_question
  Output: Wir erhalten eine Folge ganzer Zahlen zwischen 1 (eingeschlossen) und 20 (eingeschlossen). Mit dem gleichen Befehl kann man aber auch eine Folge von reellen Zahlen erstellen. Probieren Sie z.B. mal pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Geben Sie pi:10 ein und schauen Sie einfach mal was passiert. pi ist eine vordefinierte Konstante und hat wie zu erwarten den Wert 3.1415... .

- Class: text
  Output: Das Ergebnis ist ein Vektor reeller Zahlen. Am Anfang steht die Zahl pi. Danach folgen Zahlen die um jeweils 1 erhöht sind. Die obere Grenze von 10 wird nie erreicht, weil die nächste Zahl in der Folge schon größer als 10 wäre.

- Class: cmd_question
  Output: 'Und was passiert, wenn wir 15:1 eingeben? Probieren Sie es aus.'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Tippen Sie 15:1 ein und drücken Sie die Eingabetaste.

- Class: text
  Output: R hat in Einerschritten rückwärts gezählt! Dieses Verhalten wird eher selten gebraucht, aber es schadet nicht, das mal gesehen zu haben.

- Class: text
  Output: 'Zur Erinnerung: Sollten Sie eine Frage zu einer Funktion haben, können Sie die Dokumentation dieser Funktion mit einem Fragezeichen gefolgt vom Namen der Funktion öffnen: ?name_der_funktion. Hier haben wir allerdings einen Sonderfall, weil der Doppelpunkt ein Sonderzeichen ist. Dieses muss in Anführungszeichen gesetzt werden, also z.B. so: ?":".'

- Class: cmd_question
  Output: Öffnen Sie nun die Dokumentation des ':' Operators.
  CorrectAnswer: ?`:`
  AnswerTests: ANY_of_exprs('?`:`', "?':'", '?":"')
  Hint: "In order to view the documentation for a symbol like the colon operator,
    you have to use backticks (or quotes). This is so R knows you are not attempting to use the
    symbol in the command. Here's what it looks like: ?`:`. Don't forget the question
    mark out front."

- Class: text
  Output: Often, we'll desire more control over a sequence we're creating than what
    the `:` operator gives us. The seq() function serves this purpose.

- Class: cmd_question
  Output: The most basic use of seq() does exactly the same thing as the `:` operator.
    Try seq(1, 20) to see this.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Type seq(1, 20) and press Enter. The space after the comma is not required,
    but is recommended as it tends to make your code appear less cluttered.

- Class: cmd_question
  Output: This gives us the same output as 1:20. However, let's say that instead we
    want a vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0, 10,
    by=0.5) does just that. Try it out.
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: You are still using the seq() function here, but this time with an extra argument
    that tells R you want to increment your sequence by 0.5. Try seq(0, 10, by=0.5).

- Class: cmd_question
  Output: Or maybe we don't care what the increment is and we just want a sequence
    of 30 numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it
    a shot now and store the result in a new variable called my_seq.
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: 'You''re using the same function here, but changing its arguments for different
    results. Be sure to store the result in a new variable called my_seq, like this:
    my_seq <- seq(5, 10, length=30).'

- Class: cmd_question
  Output: To confirm that my_seq has length 30, we can use the length() function.
    Try it now.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Use length(my_seq) to view the length of the my_seq variable.

- Class: text
  Output: Let's pretend we don't know the length of my_seq, but we want to generate
    a sequence of integers from 1 to N, where N represents the length of the my_seq
    vector. In other words, we want a new vector (1, 2, 3, ...) that is the same length
    as my_seq.

- Class: cmd_question
  Output: 'There are several ways we could do this. One possibility is to combine
    the `:` operator and the length() function like this: 1:length(my_seq). Give that
    a try.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Try 1:length(my_seq), without assigning the result to a new variable.

- Class: cmd_question
  Output: Another option is to use seq(along.with = my_seq). Give that a try.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Type seq(along.with = my_seq). Notice we're using the same seq() function, but
    with a different argument called `along.with`. This tells R that you want a sequence
    'along with' the sequence my_seq. Remember you can type ?seq if you have questions
    about the seq() function.

- Class: cmd_question
  Output: However, as is the case with many common tasks, R has a separate built-in
    function for this purpose called seq_along(). Type seq_along(my_seq) to see it
    in action.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: The seq_along() function is a variation of the seq() function. Try seq_along(my_seq)
    to get the same result yet another way.

- Class: text
  Output: There are often several approaches to solving the same problem, particularly
    in R. Simple approaches that involve less typing are generally best. It's also
    important for your code to be readable, so that you and others can figure out
    what's going on without too much hassle.

- Class: text
  Output: If R has a built-in function for a particular task, it's likely that function
    is highly optimized for that purpose and is your best option. As you become a
    more advanced R programmer, you'll design your own functions to perform tasks
    when there are no better options. We'll explore writing your own functions in
    future lessons.

- Class: text
  Output: One more function related to creating sequences of numbers is rep(), which
    stands for 'replicate'. Let's look at a few uses.

- Class: cmd_question
  Output: If we're interested in creating a vector that contains 40 zeros, we can
    use rep(0, times = 40). Try it out.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Type rep(0, times = 40) to make a vector containing 40 zeros.

- Class: cmd_question
  Output: If instead we want our vector to contain 10 repetitions of the vector (0,
    1, 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Try rep(c(0, 1, 2), times = 10) for a different variation on the same theme.
    Be sure to use the c() function to tell R that the numbers 0, 1, and 2 make up
    a vector.

- Class: cmd_question
  Output: Finally, let's say that rather than repeating the vector (0, 1, 2) over
    and over again, we want our vector to contain 10 zeros, then 10 ones, then 10
    twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Type rep(c(0, 1, 2), each = 10) to see how the `each` argument to the rep()
    function alters its behavior slightly.

