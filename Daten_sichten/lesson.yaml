- Class: meta
  Course: R Programming
  Lesson: Looking at Data
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: Immer wenn Sie mit einem neuen Datensatz arbeiten, sollten Sie sich zuerst die Daten genau ansehen! Welches Format haben die Daten? Was sind die Dimensionen? Was sind die Variablennamen? Wie sind die Variablen gespeichert? Gibt es fehlende Werte? Haben die Daten irgendwelche Mängel?

- Class: text
  Output: Diese Übung wird Ihnen beibringen, diese und weitere Fragen mit Hilfe der in R integrierten Funktionen zu beantworten. Wir werden einen Datensatz benutzen, der der "United States Department of Agriculture's PLANTS Database" (http://plants.usda.gov/adv_search.html) entstammt.

- Class: cmd_question
  Output: Die Daten sind in einer Variable namens "plants" gespeichert. Tippen Sie ls() um die Variablen in Ihrem Arbeitsbereich aufgelistet zu bekommen. Unter diesen sollte die Variable plants vorhanden sein.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Benutzen Sie den Befehl ls() um eine Liste der Variablen in Ihrem Arbeitsbereich zu erhalten.

- Class: cmd_question
  Output: Beginnen wir damit zu prüfen, in welche Kategorie die Variable plants gehört. Dafür benötigen wir den Befehl class(plants). Dies wird uns einen Hinweis auf die Gesamtstruktur der Daten geben.
  CorrectAnswer: class(plants)
  AnswerTests: omnitest(correctExpr='class(plants)')
  Hint: Tippen Sie class(plants) in die Konsole.

- Class: text
  Output: Es ist sehr verbreitet, dass Daten in einem 'data frame' gespeichert sind. Dies ist die voreingestellte Kategorie für Daten, die von R bspw. über die Funktionen read.csv() und read.table() eingelesen werden.

- Class: cmd_question
  Output: "Da der Datensatz in einem 'data frame' gespeichert ist, wissen wir, dass er rechtwinklig ist. In anderen Worten: Der Datensatz hat zwei Dimensionen (Zeilen und Spalten) und passt somit immer in eine Tabelle bzw. eine Tabellenkalkulation. Nutzen Sie den Befehl dim(plants) um zu sehen, mit wie vielen Reihen und Spalten wir es zu tun haben."
  CorrectAnswer: dim(plants)
  AnswerTests: omnitest(correctExpr='dim(plants)')
  Hint: Nutzen Sie den Befehl dim(plants) um die exakten Dimensionen des plants-Datensatzes zu sehen.

- Class: text
  Output: Die erste Zahl, die Sie sehen, (5166) ist die Anzahl der Zeilen (Beobachtungen) und die zweite Zahl (10) ist die Anzahl der Spalten (Variablen). 

- Class: cmd_question
  Output: Sie können auch den Befehl nrow(plants) nutzen, um nur die Anzahl der Reihen zu sehen. Probieren Sie dies jetzt aus.
  CorrectAnswer: nrow(plants)
  AnswerTests: omnitest(correctExpr='nrow(plants)')
  Hint: Nutzen Sie nrow(plants) um nur die Anzahl der Zeilen zu sehen.

- Class: cmd_question
  Output: ... und ncol(plants) um nur die Anzahl der Spalten zu sehen.
  CorrectAnswer: ncol(plants)
  AnswerTests: omnitest(correctExpr='ncol(plants)')
  Hint: Nutzen Sie den Befehl ncol(plants) um die Anzahl der Spalten zu sehen.

- Class: cmd_question
  Output: Wenn Sie neugierig sind, wie viel Speicherplatz der Datensatz benötigt, können Sie den Befehl object.size(plants) nutzen. Probieren Sie es aus!
  CorrectAnswer: object.size(plants)
  AnswerTests: omnitest(correctExpr='object.size(plants)')
  Hint: object.size(plants) sagt Ihnen, wie viel Speicherplatz der Datensatz benötigt.

- Class: cmd_question
  Output: "Nun, da wir ein Gefühl für die Form und Größe des Datensatzes haben, wollen wir ein Gefühl dafür gewinnen, welche Informationen der Datensatz enthält. names(plants) gibt Ihnen einen 'character vector' (also einen Vektor, der Buchstaben enthält) der Spalten-/Variablennamen. Versuchen Sie es!"
  CorrectAnswer: names(plants)
  AnswerTests: omnitest(correctExpr='names(plants)')
  Hint: names(plants) erstellt Ihnen einen Vektor der Spaltennamen.

- Class: text
  Output: Die Variablennamen dieses Datensatzes sind sehr aussagekräftig, aber das wird nicht immer der Fall sein. Der logisch nächste Schritt ist, die eigentlichen Daten anzusehen. Unser Datensatz enthält allerdings über 5000 Beobachtungen (Zeilen), sodass es unpraktisch ist, alle Daten auf einmal anzusehen.
  
- Class: cmd_question
  Output: Die Funktion head() erlaubt Ihnen, den Anfang des Datensatzes anzuschauen. Versuchen Sie es mit nur einem Argument.
  CorrectAnswer: head(plants)
  AnswerTests: omnitest(correctExpr='head(plants)')
  Hint: head(plants) zeigt Ihnen den Anfang des Datensatzes.

- Class: text
  Output: Nehmen Sie sich eine Minute um den soeben erhaltenen Output durchzusehen und zu verstehen. Jede Reihe ist mit der Nummer der Beobachtung beschriftet sowie jede Spalte mit dem Variablennamen. Ihr Bildschirm ist wahrscheinlich nicht breit genug um alle zehn Spalten nebeneinander zu sehen. In diesem Fall zeigt R in jeder Reihe so viele Spalten wie möglich an, bevor es in der nächsten Reihe weitermacht.

- Class: cmd_question
  Output: Die Funktion head() zeigt Ihnen automatisch die ersten sechs Zeilen der Daten. Sie können dies ändern, indem Sie die Anzahl der Zeilen, die Sie zu sehen wünschen, als ein zweites Argument eingeben. Nutzen Sie den Befehl head() um die ersten zehn Reihen des Datensatzes anzuschauen.
  CorrectAnswer: head(plants, 10)
  AnswerTests: omnitest(correctExpr='head(plants, 10)')
  Hint: head(plants, 10) zeigt Ihnen die ersten 10 Zeilen des Datensatzes.

- Class: cmd_question
  Output: Dasselbe gilt für die Funktion tail(), mit der Sie das Ende des Datensatzes ansehen können. Nutzen Sie den Befehl, um die letzten 15 Zeilen anzuschauen.
  CorrectAnswer: tail(plants, 15)
  AnswerTests: omnitest(correctExpr='tail(plants, 15)')
  Hint: tail(plants, 15) zeigt Ihnen die letzten 15 Zeilen des Datensatzes.

- Class: cmd_question
  Output: Nachdem Sie sich den Anfang und das Ende der Daten angesehen haben, haben sie wahrscheinlich eine Menge an NAs bemerkt, die R´s Platzhalter für fehlende Werte sind. Nutzen Sie den Befehl summary(plants) um ein besseres Gefühl dafür zu bekommen, wie jede Variable verteilt ist und wie viele Werte des Datensatzes fehlen.
  CorrectAnswer: summary(plants)
  AnswerTests: omnitest(correctExpr='summary(plants)')
  Hint: Tippen Sie summary(plants) in das Eingabefeld.

- Class: text
  Output: summary() liefert für jede Variable einen anderen Output, der von der Kategorie der Variablen abhängig ist. Für numerische Daten wie Precip_Min zeigt summary() das Minimum, untere Quartil, den Median, das arithmetische Mittel, obere Quartil und das Maximum an. Diese Werte helfen uns zu verstehen, wie die Daten verteilt sind.

- Class: text
  Output: Für kategoriale Variablen (in R 'factor variables') zeigt summary() die absolute Häufigkeit jeder Ausprägung (in R 'level'). Zum Beispiel kommt jede Ausprägung der Variable "Sientific_Name" nur einmal vor, da der wissenschaftliche Name jeder Pflanze einmalig ist. Im Gegensatz dazu sagt uns die Zusammenfassung für die Variable "Duration", dass der Datensatz 3031 "Perennial plants" (mehrjährige Pflanzen), 682 "Annual plant" (einjährige Pflanzen) usw. enthält.

- Class: cmd_question
  Output: 
  You can see that R truncated the summary for Active_Growth_Period by including a catch-all category called 'Other'. Since it is a categorical/factor variable, we can see how many times each value actually occurs in the data with table(plants$Active_Growth_Period).
  CorrectAnswer: table(plants$Active_Growth_Period)
  AnswerTests: omnitest(correctExpr='table(plants$Active_Growth_Period)')
  Hint: table(plants$Active_Growth_Period) will display counts for each level of the factor variable.

- Class: text
  Output: Each of the functions we've introduced so far has its place in helping you to better understand the structure of your data. However, we've left the best for last....

- Class: cmd_question
  Output: Perhaps the most useful and concise function for understanding the *str*ucture of your data is str(). Give it a try now.
  CorrectAnswer: str(plants)
  AnswerTests: omnitest(correctExpr='str(plants)')
  Hint: Use str(plants) to look at the structure of your data.

- Class: text
  Output: The beauty of str() is that it combines many of the features of the other functions you've already seen, all in a concise and readable format. At the very top, it tells us that the class of plants is 'data.frame' and that it has 5166 observations and 10 variables. It then gives us the name and class of each variable, as well as a preview of its contents.

- Class: text
  Output: str() is actually a very general function that you can use on most objects in R. Any time you want to understand the structure of something (a dataset, function, etc.), str() is a good place to start.

- Class: text
  Output: In this lesson, you learned how to get a feel for the structure and contents of a new dataset using a collection of simple and useful functions. Taking the time to do this upfront can save you time and frustration later on in your analysis.

- Class: text
  Output: Herzlichen Glückwunsch, Sie haben soeben die Anforderungen für die Einsendeaufgaben zum Fernlehrbrief  `Statistik 1 - Deskriptive Statistik - Bivariate Deskriptive Statistik` (Aufgabe 1) erfüllt. Nennen Sie in Ihrer Einsendung unter Aufgabe 1 einfach das Codewort `MeisteR`.
